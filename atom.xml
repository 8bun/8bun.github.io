<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrChen</title>
  
  <subtitle>行者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://8bun.github.io/"/>
  <updated>2019-07-13T13:55:08.292Z</updated>
  <id>https://8bun.github.io/</id>
  
  <author>
    <name>Mr.Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XML之xmlns相关</title>
    <link href="https://8bun.github.io/2019/07/13/XML%E4%B9%8Bxmlns%E7%9B%B8%E5%85%B3/"/>
    <id>https://8bun.github.io/2019/07/13/XML之xmlns相关/</id>
    <published>2019-07-13T13:45:28.000Z</published>
    <updated>2019-07-13T13:55:08.292Z</updated>
    
    <content type="html"><![CDATA[<p>对于很多<code>xml</code>文件的开头，通常都会有类似如下的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p>可以这样理解：</p><p>首先这个文件是一个<code>xml</code>文件，那么文件里面的所有内容都符合<code>xml</code>语法规范，</p><p>开头的<code>&lt;project&gt;&lt;/project&gt;</code>这最外层同样也是一个<code>xml</code>文件的标签，后面那一长串也就是所谓的属性，其中xmlns表示命名空间，<code>xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</code> 这表示默认命名空间（如果你的<code>xml</code>标签没有带任何前缀，则默认认定标签来自默认命名空间），而下面<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code> 这个命名空间里面的元素或者属性就必须要以<code>xsi:</code>这种方式来写，比如<code>schemaLocation</code>就是他的一个属性，所以写成<code>xsi:schemaLocation</code>，而默认命名空间不带类似<code>xsi</code>这种，其实xml标签名称有个专业叫法叫做<code>QName</code>，而如果没有前面的<code>xsi:</code>这种一般叫做<code>NCName</code>。</p><p>你会发现， 这个 <code>xmlns:xsi</code> 在不同的 xml 文档中似乎都会出现。 这是因为， <code>xsi</code> 已经成为了一个业界默认的用于 <code>XSD（XML Schema Definition)</code> 文件的命名空间。</p><p>所以像<code>mvn</code>里面的<code>&lt;dependency&gt;</code>这种就是默认命名空间下面的元素，最后那一行就表示把定义这个命名空间的<code>schema</code>文件给引用进来，好让<code>eclipse</code>这类型工具能够解析和验证你的xml文件是否符合语法规范。</p><p><code>xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</code><br>上面这行的语法其实是， <code>xsi:schemaLocation = &quot;键&quot; &quot;值&quot;</code>。即 <code>xsi</code> 命名空间下 <code>schemaLocation</code>元素的值为一个由空格分开的键值对。等同于<code>&lt;import namespace=&quot;xxx&quot; schemaLocation=&quot;xxx.xsd&quot;/&gt;</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于很多&lt;code&gt;xml&lt;/code&gt;文件的开头，通常都会有类似如下的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="xml" scheme="https://8bun.github.io/categories/xml/"/>
    
    
      <category term="xmlns" scheme="https://8bun.github.io/tags/xmlns/"/>
    
      <category term="命名空间" scheme="https://8bun.github.io/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://8bun.github.io/2019/07/08/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://8bun.github.io/2019/07/08/PHP学习笔记/</id>
    <published>2019-07-08T08:09:44.000Z</published>
    <updated>2019-07-10T14:09:49.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP表单"><a href="#PHP表单" class="headerlink" title="PHP表单"></a>PHP表单</h1><p><code>PHP</code>脚本可以通过<code>_GET</code>或<code>_POST</code>来获取相应表单的提交内容。</p><p>预定义的<code>$_REQUEST</code>变量包含了 <code>$_GET、$_POST 和 $_COOKIE</code> 的内容。</p><p><code>$_REQUEST</code> 变量可用来收集通过 <code>GET 和 POST</code>方法发送的表单数据。</p><p>函数传入表单元素<code>name</code>可以获取该<code>name</code>表单元素所填的值，函数返回该值或数组。</p><p>如果对于表单中的<code>selector</code>多w个<code>option</code>，你可以选择将该<code>selector</code>的<code>name</code>定义为一个数组，如<code>name=p[]</code>，这样，返回的就是一个所有被选择的<code>option 的 value</code>构成的<code>p</code>数组，当然，前提是你给<code>selector</code>设置了<code>multiple=&quot;multiple&quot;</code>。</p><p>所以，对于单选按钮，返回的<code>name</code>设置为变量，多选返回的<code>name</code>设置为数组。</p><a id="more"></a><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>如果在客户端就对表单进行验证，则可以减少服务器的负担，而且浏览器速度更快。</p><p>如果用户输入需要插入数据库，应该考虑使用服务器验证。在服务器验证表单的一种好的方式是，可以把表单的数据传给当前页面（异步提交的方式更好），而不是跳转到不同的页面。这样用户就可以在同一张表单页面得到错误信息。用户也就更容易发现错误了。</p><h2 id="几个-SERVER数组的区别"><a href="#几个-SERVER数组的区别" class="headerlink" title="几个$_SERVER数组的区别"></a>几个$_SERVER数组的区别</h2><p>URL 地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.5idev.com/php/index.php/test/foo?username=hbolive</span><br></pre></td></tr></table></figure><ul><li><code>$_SERVER[&#39;PHP_SELF&#39;]</code> 得到：<code>/php/index.php/test/foo</code>，一般用来引用当前网页地址，并且它是系统自动生成的全局变量</li><li><code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code> 得到：<code>/php/index.php</code></li><li><code>$_SERVER[&#39;REQUEST_URI&#39;]</code>得到：<code>/php/index.php/test/foo?username=hbolive</code></li></ul><p>从该例子可以看出:</p><ol><li><code>$_SERVER[&#39;PHP_SELF&#39;]</code>则反映的是 <code>PHP</code> 程序本身；</li><li><code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code>反映的是程序文件本身（这在页面需要指向自己时非常有用）；</li><li><code>$_SERVER[&#39;REQUEST_URI&#39;]</code>则反映了完整 <code>URL</code> 地址（不包括主机名）。</li></ol><h3 id="SERVER-39-PHP-SELF-39-的避免使用"><a href="#SERVER-39-PHP-SELF-39-的避免使用" class="headerlink" title="_SERVER[&#39;PHP_SELF&#39;]的避免使用"></a><code>_SERVER[&#39;PHP_SELF&#39;]</code>的避免使用</h3><h3 id="安全漏洞"><a href="#安全漏洞" class="headerlink" title="安全漏洞"></a>安全漏洞</h3><p>如果你有一段代码像这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;"</span>&gt; &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>运行之后，你可在地址后面输入任何东西，检查元素之后会发现<code>action</code>发生了变化，如果你加入了一段<code>js</code>代码，则后果</p><p>将会直接影响页面的效果。这些都容易被黑客利用来修改页面中一些重要参数、全局变量等。</p><p>所以，一般使用如下方式可以解决上述问题：</p><ol><li><p><code>htmlentities($_SERVER[&#39;PHP_SELF&#39;])</code>来替代简单的<code>$_SERVER[&#39;PHP_SELF&#39;]</code>；</p></li><li><p>可以的条件下，使用 <code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code> 或 <code>$_SERVER[&#39;REQUEST_URI&#39;]</code> 替代 <code>$_SERVER[&#39;PHP_SELF&#39;]</code></p></li></ol><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie-是什么"><a href="#Cookie-是什么" class="headerlink" title="Cookie 是什么"></a>Cookie 是什么</h2><ol><li><p>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</p></li><li><p>浏览器需要保存这段数据，不得轻易删除。</p></li><li><p>此后每次浏览器访问该服务器，都必须带上这段数据。</p></li></ol><p><code>Cookie</code>就是这么简单，这就是 <code>Web</code> 开发里 <code>Cookie</code> 的含义。</p><h2 id="如何使用-Cookie"><a href="#如何使用-Cookie" class="headerlink" title="如何使用 Cookie"></a>如何使用 Cookie</h2><p><code>Cookie</code> 一般有两个作用。</p><p><strong>第一个作用是识别用户身份。</strong></p><p>比如用户 <code>A</code> 用浏览器访问了 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a>，那么 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 的服务器就会立刻给 A 返回一段数据「uid=1」（这就是 <code>Cookie</code>）。当 <code>A</code>再次访问 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 的其他页面时，就会附带上「uid=1」这段数据。</p><p>同理，用户 <code>B</code> 用浏览器访问 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 时，<a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 发现 <code>B</code> 没有附带 uid 数据，就给<code>B</code> 分配了一个新的 uid，为2，然后返回给 <code>B</code> 一段数据「uid=2」。<code>B</code> 之后访问 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 的时候，就会一直带上「uid=2」这段数据。</p><p>借此，<a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 的服务器就能区分 <code>A 和 B</code> 两个用户了。</p><p><strong>第二个作用是记录历史。</strong></p><p>假设 <a href="https://link.zhihu.com/?target=http%3A//a.com" rel="external nofollow noopener noreferrer" target="_blank">http://a.com</a> 是一个购物网站，当 <code>A</code> 在上面将商品 <code>A1 、A2</code> 加入购物车时，<code>Js、PHP</code>都可以设置或改写 <code>Cookie</code>，改为「uid=1; cart=<code>A1,A2</code>」，表示购物车里有<code>A1 和 A2</code> 两样商品了。</p><p>这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 <code>A1、A2</code>躺在购物车里，因为浏览器并不会无缘无故地删除这个 <code>Cookie</code>。</p><p>借此，就达到里记录用户操作历史的目的了。（实际的网站使用 <code>Cookie</code> 时会更谨慎一些。）</p><p>在<code>PHP</code>中，当某个客户端向服务器第一次发起访问之后，服务器端运行的<code>PHP</code>文件中可以使用<code>setCookie()</code>函数生成<code>Cookie</code>，服务器把<code>Cookie</code> 发送到客户端并保存在客户端指定的路径下，你也可以设置保存的时间限制等。然后，在<code>PHP</code>中使用<code>$_COOKIE[name]</code>获取<code>Cookie</code>信息；</p><p>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。</p><h2 id="Cookie注意事项"><a href="#Cookie注意事项" class="headerlink" title="Cookie注意事项"></a>Cookie注意事项</h2><ol><li><p>对于某些客户端是不支持或禁止<code>Cookie</code>的；</p></li><li><p>每个<code>Cookie</code>的内存限制为<code>4KB</code>左右；</p></li><li>只能有<code>300</code>个<code>Cookie</code>左右可以存储在客户端；</li><li>有些浏览器对<code>Cookie</code>“喜新厌旧”，尽管旧<code>Cookie</code>还未过期。</li><li>只要 Cookie 在设置的时候设置了只允许加密传输，Cookie 传递的时候就会只走加密的 HTTPS。</li></ol><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><ol><li>cookie相对不是太安全，容易被盗用导致<code>cookie</code>欺骗</li><li>单个<code>cookie</code>的值最大只能存储<code>4k</code>，每次请求都要进行网络传输，占用带宽</li><li>用户信息既可以存储在<code>sessioin</code>中，也可以存储在<code>cookie</code>中，他们之间的差别在于<code>session</code>可以方便的存取多种数据类型，而<code>cookie</code>只支持字符串类型，同时对于一些安全性比较高的数据，<code>cookie</code>需要进行格式化与加密存储，而<code>session</code>存储在服务端则安全性较高。</li></ol><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>由于<code>HTTP</code>协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是<code>session</code>.典型的场景比如购物车，当你点击下单按钮时，由于<code>HTTP</code>协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的<code>session</code>，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。</p><p><code>cookie</code>中就包含了一个叫<code>PHPSESSID</code>的会话<code>ID</code>唯一标识用户,这里用到了<code>session</code>。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><code>session</code>是将用户的会话数据<strong>存储在服务端</strong>，没有大小限制</li><li><code>session</code> 的工作机制是：为每个访客创建一个唯一的 <code>id (UID)</code>，并基于这个 <code>UID</code> 来存储变量。<code>UID</code>存储在 <code>cookie</code> 中，或者通过 <code>URL</code>进行传导。</li><li>通过一个<code>session_id</code>进行用户识别，PHP默认情况下<code>session_id</code>是通过<code>cookie</code>来保存的，因此从某种程度上来说，<code>seesion</code>依赖于<code>cookie</code>。</li><li>但这不是绝对的，<code>session_id</code>也可以通过参数来实现，只要能将<code>session_id</code>传递到服务端（如果用户浏览器不支持<code>cookie</code>或者关闭了它，<code>session_id</code>将会通过<code>URL</code>来传播，即每次<code>HTTP</code>交互，<code>URL</code>后面都会被附加上一个诸如 <code>sid=xxxxx</code> 这样的参数，服务端据此来识别用户。）进行识别的机制都可以使用<code>session</code>。</li></ol><p><code>session</code>信息存储在服务端，相对于存储在客户端的<code>cookie</code>更为安全，所以正常一般网站在用于“判断用户是否登录”时，确实是使用<code>session</code>，例如可以在<code>session</code>里存储如下一个数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证用户名和密码成功后</span></span><br><span class="line">$_SESSION[<span class="string">'userinfo'</span>] = [</span><br><span class="line">  <span class="string">'uid'</span> =&gt; <span class="number">123</span>,</span><br><span class="line">  <span class="string">'username'</span> =&gt; <span class="string">'testuser'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>而后在需要验证登录的地方加入类似如下判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_SESSION[<span class="string">'userinfo'</span>]) || <span class="keyword">empty</span>($_SESSION[<span class="string">'userinfo'</span>][<span class="string">'uid'</span>]))&#123;</span><br><span class="line">  <span class="comment">//未登录，引导登录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是使用<code>session</code>做用户登录的基本存储和验证逻辑，当然实际开发过程中会将这部分的代码封装。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>在服务端保存<code>session</code>的方法很多，内存、数据库、文件都有。集群的时候也要考虑<code>session</code>的转移，在大型的网站，一般会有专门的<code>session</code>服务器集群，用来保存用户会话，这个时候 <code>session</code> 信息都是放在内存的，使用一些缓存服务比如<code>Memcached</code>之类的来放 <code>session</code>。</li><li>默认情况下，<code>session</code>是以文件形式存储在服务器上的，因此当一个页面开启了<code>session</code>之后，会独占这个<code>session</code>文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题。</li><li>默认情况下，<code>session</code>的超时时间<code>（Timeout）</code>是20分钟，即用户保持连续20分钟不访问网站，则<code>session</code>被收回。如果在这20分钟内用户又访问了一次页面，那么20分钟就重新计时了。</li></ol><h2 id="PHP编程"><a href="#PHP编程" class="headerlink" title="PHP编程"></a>PHP编程</h2><p>在您把用户信息存储到<code>PHP session</code>中之前，首先必须启动会话。</p><p>使用<code>session_start()</code>启动会话，此时用户的会话被注册，然后使用<code>$_SESSION</code>数组存储<code>session</code>数据</p><p>您也可以通过调用 <code>session_destroy()</code>函数彻底销毁 <code>session</code> 。</p><h1 id="PHP、MySQL"><a href="#PHP、MySQL" class="headerlink" title="PHP、MySQL"></a>PHP、MySQL</h1><p>PHP 5 及以上版本建议使用以下方式连接 MySQL :</p><ul><li><strong>MySQLi extension</strong> (“i” 意为 improved)</li><li><strong>PDO (PHP Data Objects)</strong></li></ul><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p><code>MySQLi</code> 和<code>PDO</code> 有它们自己的优势：</p><p><code>PDO</code> 应用在 <code>12</code> 种不同数据库中，<code>MySQLi</code> 只针对 <code>MySQL</code> 数据库。</p><p>所以，如果你的项目需要在多种数据库中切换，建议使用 <code>PDO</code> ，这样你只需要修改连接字符串和部分查询语句即可。 使用 <code>MySQLi</code>, 如果不同数据库，你需要重新编写所有代码，包括查询。</p><p>两者都是面向对象, 但 <code>MySQLi</code> 还提供了 <code>API</code>接口。</p><p>两者都支持预处理语句。 预处理语句可以防止 <code>SQL</code>注入，对于 <code>web</code>项目的安全性是非常重要的。</p><p>在使用之前需要先查看<code>phpinfo()</code>有没有<code>mysqli</code>和<code>PDO</code>的安装信息。</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>ajax的全称是<strong>A</strong>synchronous<strong><em>J</em></strong>avascript<strong><em>+X</em></strong>ML。<br><code>异步传输+js+xml</code>。所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果我们可以再来处理这个事。（当然，在其他语境下这个解释可能就不对了）<br>这个很重要，如果不是这样的话，我们点完按钮，页面就会死在那里，其他的数据请求不会往下走了。这样比等待刷新似乎更加讨厌。<br>（虽然提供异步通讯功能的组件默认情况下都是异步的，但它们也提供了同步选项，如果你好奇把那个选项改为false的话，你的页面就会死在那里）<br>xml只是一种数据格式，在这件事里并不重要，我们在更新一行字的时候理论上说不需要这个格式，但如果我们更新很多内容，那么格式化的数据可以使我们有条理地去实现更新。</p><p>现在大部分人其实是用<code>JSON</code>这种格式来代替<code>XML</code>的，因为前者更加简洁，据说目前的解析速度也更快。多快好省，能省则省啊。</p><p>总结：只要是<code>JS</code>调用异步通讯组件并使用格式化的数据来更新<code>web</code>页面上的内容或操作过程，那么我们用的方法就可算是<code>AJAX</code>。</p><h3 id><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP表单&quot;&gt;&lt;a href=&quot;#PHP表单&quot; class=&quot;headerlink&quot; title=&quot;PHP表单&quot;&gt;&lt;/a&gt;PHP表单&lt;/h1&gt;&lt;p&gt;&lt;code&gt;PHP&lt;/code&gt;脚本可以通过&lt;code&gt;_GET&lt;/code&gt;或&lt;code&gt;_POST&lt;/code&gt;来获取相应表单的提交内容。&lt;/p&gt;
&lt;p&gt;预定义的&lt;code&gt;$_REQUEST&lt;/code&gt;变量包含了 &lt;code&gt;$_GET、$_POST 和 $_COOKIE&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$_REQUEST&lt;/code&gt; 变量可用来收集通过 &lt;code&gt;GET 和 POST&lt;/code&gt;方法发送的表单数据。&lt;/p&gt;
&lt;p&gt;函数传入表单元素&lt;code&gt;name&lt;/code&gt;可以获取该&lt;code&gt;name&lt;/code&gt;表单元素所填的值，函数返回该值或数组。&lt;/p&gt;
&lt;p&gt;如果对于表单中的&lt;code&gt;selector&lt;/code&gt;多w个&lt;code&gt;option&lt;/code&gt;，你可以选择将该&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;name&lt;/code&gt;定义为一个数组，如&lt;code&gt;name=p[]&lt;/code&gt;，这样，返回的就是一个所有被选择的&lt;code&gt;option 的 value&lt;/code&gt;构成的&lt;code&gt;p&lt;/code&gt;数组，当然，前提是你给&lt;code&gt;selector&lt;/code&gt;设置了&lt;code&gt;multiple=&amp;quot;multiple&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以，对于单选按钮，返回的&lt;code&gt;name&lt;/code&gt;设置为变量，多选返回的&lt;code&gt;name&lt;/code&gt;设置为数组。&lt;/p&gt;
    
    </summary>
    
      <category term="CS交互" scheme="https://8bun.github.io/categories/CS%E4%BA%A4%E4%BA%92/"/>
    
    
      <category term="PHP" scheme="https://8bun.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Git相关知识</title>
    <link href="https://8bun.github.io/2019/07/05/Git%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>https://8bun.github.io/2019/07/05/Git相关知识/</id>
    <published>2019-07-05T05:43:44.000Z</published>
    <updated>2019-07-05T05:45:44.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在为你的电脑安装完<code>Git</code>之后，因为<code>Git</code>是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和<code>Email</code>地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>你可以在任何一个目录下进行<code>git init</code>操作，让<code>Git</code>系统来跟踪记录你的文件的修改情况。</p><a id="more"></a><h1 id="工作区、暂存区以及版本库"><a href="#工作区、暂存区以及版本库" class="headerlink" title="工作区、暂存区以及版本库"></a>工作区、暂存区以及版本库</h1><p><code>Git</code> 工作区里面有一个隐藏目录<code>.git</code>，这个是<code>Git</code> 的版本库，一般作为隐藏目录存放，而不是工作区。</p><p><code>Git</code>的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫<code>index</code>）的<code>暂存区</code>，还有<code>Git</code>为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><p>如果你使用了<code>git add  &lt;file&gt;</code>，操作正确之后则会将文件存储在<code>stage</code>暂存，然后使用<code>git commit -m &quot;Info&quot;</code>之后才会</p><p>提交添加到<code>master</code>分支上。<code>commit</code>面向多文件提交，<code>add</code>一般指向单文件；这时，你可以使用<code>git status</code>来查看版本库的状态。</p><p>其中<code>HEAD</code>指针指向当前版本</p><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>我们有时候要回退到之前文件的某个状态，可以使用<code>git log</code>来查看 <strong>从最近到最远的提交</strong>的日志，记录了你做了什么操作；</p><p>你也可以在后面加上<code>--pretty=oneline</code>让显示更加人性化。如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><p>你看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和<code>SVN</code>不一样，<code>Git</code>的<code>commit id</code>不是<code>1，2，3……</code>递增的数字，而是一个<code>SHA1</code>计算出来的一个非常大的数字，用十六进制表示，而且你看到的<code>commit id</code>和我的肯定不一样，以你自己的为准。为什么<code>commit id</code>需要用这么一大串数字表示呢？因为<code>Git</code>是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用<code>1，2，3……</code>作为版本号，那肯定就冲突了。</p><p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919019707114272/0" alt="git-log-timeline"></p><p>在<code>Git</code>中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交<code>ID</code>和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上<code>100</code>个版本写<code>100</code>个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>你可以使用<code>git reset --hard HEAD^</code>向前回退到上一版本。</p><p>你可以使用<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>你也可以使用<code>git reflog</code>来查看你的每一次命令，从而找到之前的<code>commit id</code>，向后回退到未来的哪个版本。</p><p>也可以使用<code>git reset --hard 1094a</code>回退到指定版本，版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><p>注意，如果我们对某一文件进行：第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>那么，第一次的修改被提交了，第二次的修改不会被提交，这是因为<code>git commit</code>只负责把暂存区的修改提交了；</p><p>当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有使用<code>add</code>放入暂存区</p><p>你可以使用<code>git diff HEAD -- &lt;file&gt;</code>来查看该文件的所有修改情况</p><p>你可以使用<code>git checkout -- &lt;file&gt;</code>来撤销你的修改。如果修改之前你已经将文件<code>add</code>到了暂存区，但还没<code>commit</code>，这时撤销修改后，就回到添加到暂存区后的状态，对实现这一操作目的的另一种做法是：</p><p>使用<code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉（unstage），重新放回工作区。</p><p>注意：<strong>当我们用<code>HEAD</code>时，表示最新的版本。</strong></p><p>如果修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态。</p><p>又到了小结时间。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考上一节<strong>版本回退</strong>，不过前提是没有推送到远程库。</p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：<code>rm test.txt</code></p><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了。现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git rm test.txt</span><br><span class="line">rm 'test.txt'</span><br><span class="line"><span class="meta">$</span> git commit -m "remove test.txt"</span><br></pre></td></tr></table></figure><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git checkout -- test.txt</span><br></pre></td></tr></table></figure><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p> 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。GitHub这个网站就是提供Git仓库托管服务的,</p><p>你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，需要配置SSH key的密钥对。</p><p>Git 服务器上存储的是公钥，你本地存储的是私钥，当你push本地代码库到远程代码库，服务器会要求你出示私钥，并且用你出示的私钥和它的公钥配对来完成认证。由于使用的是不对称加密，所以公钥可以公开，只要保管好私钥就可以。</p><p>关于密钥技术的相关知识，你可以访问：我的博客文章：</p><p>在<code>Github</code>上创建一个<code>learngit</code>仓库后，你可以根据<code>GitHub</code>的提示，在本地的<code>learngit</code>仓库下运行以下命令，你在本地关联的就是用户<code>YourName</code>的<code>learngit</code>远程库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git remote add origin git@github.com:Name/learngit.git</span><br></pre></td></tr></table></figure><p>然后，可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git push -u origin master</span><br></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git push origin master</span><br></pre></td></tr></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h3 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h3><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &apos;github.com&apos; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" rel="external nofollow noopener noreferrer" target="_blank">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而<code>SVN</code>在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p><code>Git</code>支持<code>https</code>协议，也就是说你可以使用像<code>https://github.com/michaelliao/gitskills.git</code>这样的地址，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Name/learngit.git</span><br></pre></td></tr></table></figure><p>实际上，<code>Git</code>支持多种协议，默认的<code>git://</code>使用<code>ssh</code>。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。</p><p>但Git的分支是与众不同的，无论创建、切换和删除分支，<code>Git</code>在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p><p>在<code>Git</code>里面，每次提交，<code>Git</code>都把它们串成一条时间线，这条时间线就是一个分支。</p><p>Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。</p><p><img src="https://git-scm.com/figures/18333fig0303-tn.png" alt="img"></p><p>那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 <code>HEAD 的特别指针。</code></p><p><code>在 Git 中，它是一个指向你正在工作中的本地分支的指针（将</code> HEAD <code>想象为当前分支的别名。）。</code></p><p><code>运行</code>git branch` 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作。</p><p><img src="https://git-scm.com/figures/18333fig0305-tn.png" alt="img"></p><p>我们现在转换到新建的 <code>testing</code>分支：</p><p><code>git checkout testing</code></p><p>然后<code>HEAD</code>就指向了<code>testing</code>分支：</p><p><img src="https://git-scm.com/figures/18333fig0306-tn.png" alt="img"></p><p>提交文件后，现在 <code>testing</code> 分支往前移动了一格：</p><p><img src="https://git-scm.com/figures/18333fig0307-tn.png" alt="img"></p><p>我们使用：<code>git checkout master</code>之后，HEAD 在一次 checkout 之后移动到了另一个分支，回到<code>master</code>分支上了：</p><p><img src="https://git-scm.com/figures/18333fig0308-tn.png" alt="img"></p><p>下面与分支有关的常用命令：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>如果在合并的分支中，有相同的文件但是拥有不一样的内容时，就会发生冲突，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>例如：我们在<code>master</code>和新创建的<code>newbranch</code>分支上，都分别修改了工作区的<code>readme.txt</code>，并都进行了<code>add</code>操作，</p><p>但是由于修改的内容不同，这时候，分支合并就会出现异常：</p><p>你可以使用<code>git status</code>或者<code>cat readme.txt</code>查看文件冲突：例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>再提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add readme.txt </span><br><span class="line"><span class="meta">$</span> git commit -m "conflict fixed"</span><br></pre></td></tr></table></figure><p>提交之后，分支延长，</p><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：（有同一向右的目的表示合并）</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023031831104/0" alt="git-br-conflict-merged"></p><p>用带参数的<code>git log --graph</code>也可以看到分支的合并情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch test</span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure><p>最后，删除<code>feature1</code>分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git branch -d feature1</span><br></pre></td></tr></table></figure><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023260793600/0" alt="git-br-policy"></p><p>现在，如果你在当前状态下工作，但是其他地方需要紧急处理，你可以使用<code>git stash</code>来保存工作区的当前状态，此状态信息将会保存到栈中。你可以使用<code>git stash list</code>查看所有保存的状态。</p><p>你可以使用<code>git stash apply</code>恢复之前的状态，但恢复之后栈内的相应的状态信息记录不会被删除，你可以使用<code>git stash drop</code>来删除；你可以使用<code>git stash pop</code>来代替这<code>恢复——删除</code>的操作。</p><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><p>当你从远程仓库克隆时，实际上<code>Git</code>自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>本地分支往远程推送，需要同远程进行同步，需要注意本地分支：</p><ul><li>因为<code>master</code>与远程<code>master</code>分支同步，所以需要时刻与远程同步；</li><li>开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>你本人增加的用于修复<code>bug</code>的分支只用于在本地修复<code>bug</code>，就没必要推到远程了，除非老板要看看你每周到底修复了几个<code>bug</code>；</li><li>对于为新功能开发增加的新分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p>总之，就是在<code>Git</code>中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><p>要查看远程库的信息，可以使用<code>git remote</code>命令，或者使用<code>git remote -v</code>来查看更加详细的信息。</p><p>要从远程库中获取最新分支信息，并将该分支信息与本地分支信息进行合并，你可以使用</p><p><code>git pull ##远程主机（origin） #远程分支(next)#：#本地分支(master)#</code></p><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>你可以使用<code>git push origin &lt;branch-name&gt;</code>将本地的<code>branch-name</code>分支向远程仓库推送，如果推送失败，则是因为远程分支比你的分支更新，需要解决冲突再推送。</p><p>接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 <code>origin/&lt;branch-name&gt;</code></p><p>如果要把该远程分支的内容合并到当前分支，可以运行 <code>git merge origin/&lt;branch-name&gt;</code></p><p>如果想在<strong>远程分支的基础上</strong>分化出一个新的分支来： <code>git checkout -b &lt;local-branch&gt; origin/&lt;branch-name&gt;</code></p><p>这会切换到新建的 <code>local-branch</code>本地分支，这样你就可以在里面继续开发了。</p><h3 id="建立关联并合并"><a href="#建立关联并合并" class="headerlink" title="建立关联并合并"></a>建立关联并合并</h3><p>你可以使用以下命令建立本地当前的分支与远程分支的关联：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git branch --set-upstream-to = origin/&lt;remote-branch&gt; &lt;local-branch&gt;</span><br></pre></td></tr></table></figure><p>然后使用<code>git pull</code>将所有有关联的远程分支和本地分支进行合并。</p><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的关联没有创建</p><p>因此，多人协作的<strong>工作模式</strong>通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><p>​    标签总是和某个<code>commit</code>挂钩。如果这个<code>commit</code>既出现在<code>master</code>分支，又出现在<code>dev</code>分支，那么在这两个分支上都可以看到这个标签。</p><p>你可以按照简单易记的标签与复杂的<code>commit id</code>对应起来。</p><p>你可以使用类似的：<code>git tag &lt;tag-name&gt; f52c633</code>语句来为指定<code>commit id</code>附上标签。</p><p>如果你不加上上面<code>f52c633</code>参数，则默认为<code>HEAD</code>指向的<code>commit id</code>打标签。</p><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git tag -a &lt;tag-name&gt; -m "version 0.1 released" 1094adb</span><br></pre></td></tr></table></figure><p>使用<code>git tag</code>查看当前存在的所有标签；</p><p>使用<code>git tag &lt;tag-name&gt;</code>查看指定标签的详细信息；</p><p>如果要推送某个标签到远程，可以使用命令<code>git push origin &lt;tag-name&gt;</code>；</p><p>也可一次性推送全部尚未推送到远程的本地标签：<code>$ git push origin --tags</code>；</p><p>你也可以使用<code>git tag -d &lt;tag-name&gt;</code>来删除标签；</p><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除<code>tag1</code>：</p><p><code>$ git tag -d tag1</code></p><p>然后，从远程删除。删除命令也是<code>push</code>，但是格式如下：</p><p><code>$ git push origin :refs/tags/tag1</code></p><h1 id="GitHub使用"><a href="#GitHub使用" class="headerlink" title="GitHub使用"></a>GitHub使用</h1><ul><li>在<code>GitHub</code>上，可以任意<code>Fork</code>开源仓库；</li><li>自己拥有<code>Fork</code>后的仓库的读写权限；</li><li>可以推送<code>pull request</code>给官方仓库来贡献代码。</li></ul><p>使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。</p><p>如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——<a href="https://gitee.com/" rel="external nofollow noopener noreferrer" target="_blank">码云</a>（<a href="https://gitee.com/" rel="external nofollow noopener noreferrer" target="_blank">gitee.com</a>）。</p><h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><p>让Git显示颜色，会让命令输出看起来更醒目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui true</span><br></pre></td></tr></table></figure><p>忽略特殊文件：</p><p>在<code>Git</code>工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，<code>Git</code>    就会自动忽略这些文件。</p><p>有些时候，你想添加一个文件到<code>Git</code>，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了，</p><p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到<code>Git</code>：</p><p><code>git add -f &lt;file&gt;</code></p><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理。</p><p>可以用<code>git check-ignore</code>命令检查忽略文件是否存在<code>.gitignore</code>文件中，</p><p><code>git check-ignore -v &lt;file&gt;</code></p><h2 id="更改命令别名"><a href="#更改命令别名" class="headerlink" title="更改命令别名"></a>更改命令别名</h2><p>你可以使用<code>git config --global alias.&lt;another-name&gt; &lt;origin-name&gt;</code>给<code>origin-name</code>命令起别名<code>another-name</code></p><p>配置<code>Git</code>的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>你可以在配置文件中查找别名：</p><p><code>cat .git/config</code></p><p>当前用户的<code>Git</code>配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><p><code>GitHub</code>就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给<code>GitHub</code>交保护费，那就只能自己搭建一台<code>Git</code>服务器作为私有仓库使用。</p><p>搭建<code>Git</code>服务器需要准备一台运行<code>Linux</code>的机器，强烈推荐用<code>Ubuntu或Debian</code>，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p><p>第一步，安装<code>git</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser git</span><br></pre></td></tr></table></figure><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo git init --bare sample.git</span><br></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@server:/srv/sample.git</span><br><span class="line">Cloning into &apos;sample&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure><p>剩下的推送就简单了。</p><h3 id="管理公钥"><a href="#管理公钥" class="headerlink" title="管理公钥"></a>管理公钥</h3><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis" rel="external nofollow noopener noreferrer" target="_blank">Gitosis</a>来管理公钥。</p><p>这里我们不介绍怎么玩<a href="https://github.com/res0nat0r/gitosis" rel="external nofollow noopener noreferrer" target="_blank">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p><h3 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h3><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://github.com/sitaramc/gitolite" rel="external nofollow noopener noreferrer" target="_blank">Gitolite</a>就是这个工具。</p><p>这里我们也不介绍<a href="https://github.com/sitaramc/gitolite" rel="external nofollow noopener noreferrer" target="_blank">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;在为你的电脑安装完&lt;code&gt;Git&lt;/code&gt;之后，因为&lt;code&gt;Git&lt;/code&gt;是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和&lt;code&gt;Email&lt;/code&gt;地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.email &amp;quot;email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在任何一个目录下进行&lt;code&gt;git init&lt;/code&gt;操作，让&lt;code&gt;Git&lt;/code&gt;系统来跟踪记录你的文件的修改情况。&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制系统" scheme="https://8bun.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Git" scheme="https://8bun.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://8bun.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>公钥、私钥和安全证书</title>
    <link href="https://8bun.github.io/2019/07/03/%E5%85%AC%E9%92%A5%E3%80%81%E7%A7%81%E9%92%A5%E5%92%8C%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/"/>
    <id>https://8bun.github.io/2019/07/03/公钥、私钥和安全证书/</id>
    <published>2019-07-03T14:59:43.000Z</published>
    <updated>2019-07-05T05:40:44.437Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在学习 <code>SSH</code> 章节时，一定有不少人对公钥和私钥产生过不解。在搜索公钥跟私钥的理解时，发现了这篇有趣的图解小文章，与大家共享。</strong> </p><a id="more"></a><ol><li>鲍勃有两把钥匙，一把是公钥，另一把是私钥。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey1.png" alt="PubKey1"></li><li><p>鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey2.png" alt="PubKey2"></p></li><li><p>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey3.png" alt="PubKey3"></p></li><li>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey4.png" alt="PubKey4"></li><li>鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey5.png" alt="PubKey5"></li><li>然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey6.png" alt="PubKey6"></li><li>鲍勃将这个签名，附在信件下面，一起发给苏珊。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey7.png" alt="PubKey7"></li><li>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey8.png" alt="PubKey8"></li><li>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey9.png" alt="PubKey9"></li><li>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey10.png" alt="PubKey10"></li><li>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Di<a href="http://www.linuxprobe.com/chapter-21/" rel="external nofollow noopener noreferrer" target="_blank">git</a>al Certificate）。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey11.png" alt="PubKey11"></li><li>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey12.png" alt="PubKey12"></li><li>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey13.png" alt="PubKey13"></li><li>下面，我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey14.jpg" alt="PubKey14"></li><li>首先，客户端向服务器发出加密请求。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey15.png" alt="PubKey15"></li><li>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey16.png" alt="PubKey16"></li><li>客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey17.png" alt="PubKey17"></li><li>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey18.png" alt="PubKey18"></li><li>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。<br><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey19.jpg" alt="PubKey19"></li></ol><p><img src="http://www.linuxprobe.com/wp-content/uploads/2016/04/PubKey20.png" alt="PubKey20"></p><p>感谢转载：<a href="https://blog.csdn.net/gui951753/article/details/79252773" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/gui951753/article/details/79252773</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在学习 &lt;code&gt;SSH&lt;/code&gt; 章节时，一定有不少人对公钥和私钥产生过不解。在搜索公钥跟私钥的理解时，发现了这篇有趣的图解小文章，与大家共享。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="密钥技术" scheme="https://8bun.github.io/categories/%E5%AF%86%E9%92%A5%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="公钥" scheme="https://8bun.github.io/tags/%E5%85%AC%E9%92%A5/"/>
    
      <category term="私钥" scheme="https://8bun.github.io/tags/%E7%A7%81%E9%92%A5/"/>
    
      <category term="安全证书" scheme="https://8bun.github.io/tags/%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>递归新理解</title>
    <link href="https://8bun.github.io/2019/07/02/%E9%80%92%E5%BD%92%E6%96%B0%E7%90%86%E8%A7%A3/"/>
    <id>https://8bun.github.io/2019/07/02/递归新理解/</id>
    <published>2019-07-02T14:31:00.000Z</published>
    <updated>2019-07-03T10:32:38.441Z</updated>
    
    <content type="html"><![CDATA[<p>很简单的一个问题，</p><p>给定一个整数，要求对这个整数从大位数向小位数按顺序输出。</p><p>假定这个数是<code>345</code>，我们来分析一下下面这个程序：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">N</span> </span>&#123;</span><br><span class="line">    <span class="comment">//n=345，f(345)调用f(34)，f(34)调用f(3)，执行1</span></span><br><span class="line">    <span class="comment">//回递，执行f(34)时的2语句</span></span><br><span class="line">    <span class="comment">//执行f(345)时的2语句</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(n); <span class="comment">//1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            f(n/<span class="number">10</span>); <span class="comment">//345</span></span><br><span class="line">            System.out.println(n%<span class="number">10</span>); <span class="comment">//2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> N().f(<span class="number">345</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  分析回递层之间的关系：<code>f(3)</code>执行完<code>1</code>语句后，递归向上返回到<code>f(34)</code>，而<code>f(34)</code>与<code>f(3)</code>的关系是: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">34</span>) &#123;</span><br><span class="line">f(<span class="number">3</span>), sout&lt;&lt;n%<span class="number">10</span>；<span class="comment">//所以输出了4；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，对于f(345)，也有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">345</span>) &#123;  </span><br><span class="line"> f(<span class="number">34</span>) ,  sout&lt;&lt;<span class="number">5</span>  ; </span><br><span class="line">&#125;  </span><br><span class="line">=&gt;&gt;  </span><br><span class="line">f(<span class="number">345</span>)&#123;  </span><br><span class="line">  &#123;  f(<span class="number">3</span>) , sout&lt;&lt;<span class="number">4</span>  &#125;  ,sout&lt;&lt;<span class="number">5</span> ;  </span><br><span class="line">&#125;   </span><br><span class="line">=&gt;&gt;   </span><br><span class="line">f(<span class="number">345</span>)&#123;   </span><br><span class="line">sout&lt;&lt;<span class="number">3</span>  ,  sout&lt;&lt;<span class="number">4</span>,  sout&lt;&lt;<span class="number">5</span> ; <span class="comment">//所以结果是先输出3,再输出4，最后输出5 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在做题的时候，你可以把这种递归调用的形式用自上而下的形式写出来，然后再分别找每一层与下面一层的关系，以及找到各层（每个被递归的函数）都做了什么。这样就对递归函数的执行有了更直观、深入的了解。</p><p>当然，了解递归的原理，还是要从内存的角度去理解的，这里只是记下分析递归的一个小的技巧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很简单的一个问题，&lt;/p&gt;
&lt;p&gt;给定一个整数，要求对这个整数从大位数向小位数按顺序输出。&lt;/p&gt;
&lt;p&gt;假定这个数是&lt;code&gt;345&lt;/code&gt;，我们来分析一下下面这个程序：&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://8bun.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="https://8bun.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>如何获取信息</title>
    <link href="https://8bun.github.io/2019/07/01/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF/"/>
    <id>https://8bun.github.io/2019/07/01/如何获取信息/</id>
    <published>2019-07-01T05:03:19.000Z</published>
    <updated>2019-07-01T05:14:57.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人是一台“电脑”"><a href="#人是一台“电脑”" class="headerlink" title="人是一台“电脑”"></a>人是一台“电脑”</h2><p>假如将人比作一台电脑，需要输入信息，存储数据，运算思考，输出表达。而其中输入信息，作为第一步，也是非常重要的。那么作为一个成年人，应当怎么样去收集信息，才能够尽可能快，尽可能全面呢？</p><p>从小到大，其实从来没有人教过我们如何收集信息，而这看起来好像是一个无意识的过程。不就是刷刷微博、看看新闻、读读书、看看文章嘛，大家都会嘛。然而，这种无意识，往往不是最有效的方式，甚至会让你觉得非常苦恼。</p><p>我一直在思考这个问题，如何搭建自己的信息收集渠道？因为过去收集信息，没有一个完整的体系，都是无头的苍蝇，乱撞。在浏览信息的时候，还容易因为一些别的话题将注意力分散开，像猴子掰玉米一样，大量的时间花在不断地分心上面，真正关心的信息却没有找到。</p><a id="more"></a><h2 id="结构化思维方法"><a href="#结构化思维方法" class="headerlink" title="结构化思维方法"></a>结构化思维方法</h2><p>首先，在找到答案前，先让我们确立一些原则。作为一个成年人，<strong>应当具备结构化的思维</strong>，这个是我的一个指导原则之一。其实我们遇到的大多数问题，是因为没有结构化思维工具，所以才会不知如何下手，不知道怎么收集信息，不知道怎么思考，不知道怎么做决定，等等。这些问题，统统都是因为没有一个稳定的思维结构，注定会导致过程的混乱和随意，最终得不到一个满意的答案。</p><p>结构化思维方法具有很多优势，它将问题拆分成更多维度，之前想到的是一个个零散的点，而结构化思维，让你从一个面、一个体、或者更高维度的视角去分析问题。这种多维度，让你看到事物的很多面，对事情有更加清晰的认识，将会帮助你解决手头的问题。</p><p>这个纷繁复杂的世界，就是由很多很多类的事物组成，而每一样事物，都有其规律可循，通过多个维度的观察、总结，那么你就更能掌握了这个规律，从而使得做起事情很轻松。</p><h2 id="信息收集的方法论"><a href="#信息收集的方法论" class="headerlink" title="信息收集的方法论"></a>信息收集的方法论</h2><p>信息收集也一样，有它特有的方法论，总结了这种方法论，可以为绝大多数人、绝大多数场景使用。</p><h3 id="信息结构模型"><a href="#信息结构模型" class="headerlink" title="信息结构模型"></a>信息结构模型</h3><p>信息包含了几种类型：</p><ul><li>结构化的核心知识</li><li>零散的知识点</li><li>即时信息</li></ul><p>我们的信息组成应当是一个同心圆，核心是一些最重要的结构化知识，这些知识需要艰苦地学习才能获得，成为我们思考和行动的最主要依据。比如从小接受的科学教育，让我们理解这个世界是由粒子组成，再比如，你的工作技能，需要辛苦习得，而且每天都在应用，这是我们每个人吃饭的家伙。</p><p>我们的信息结构不断完善的过程，就是新知识不断加入，融汇贯通到已有的结构里面，成为你信息结构的一部分。这个过程也是你的信息圈不断扩大的过程，它看起来就像是下面这样。<br><a href="https://user-images.githubusercontent.com/1180416/42136028-f2e88a06-7d86-11e8-88c4-210e21f20ed3.png" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://user-images.githubusercontent.com/1180416/42136028-f2e88a06-7d86-11e8-88c4-210e21f20ed3.png" alt="image"></a></p><h2 id="信息的重要性及时间分配"><a href="#信息的重要性及时间分配" class="headerlink" title="信息的重要性及时间分配"></a>信息的重要性及时间分配</h2><p>根据二八法则，核心知识在我们的信息里面，是最重要的百分之八十，它们起的作用最大，而剩下的零散知识点和即时信息，则没有那么重要了。零散知识点可以作为我们扩展信息广度的方法，快速了解一些未掌握的信息。而即时信息，比如新闻、微博等，大多时候作为我们的一个社交谈资，作为一个普通人，你谈不谈论世界杯，也并不会对你生活有什么很大的影响。</p><p>重要的信息，需要我们花时间花精力去掌握，一门课程、一本书籍、一种技能，都需要扎扎实实地花时间去搭建整个结构。比如练吉他，首先需要知道一些简单的乐理，然后学会和弦、看谱，然后勤奋练习，最终才有可能弹奏出一首曲子来；而即时消息，则可以用一些碎片时间来刷，上班路上，刷一刷微信公众号和朋友圈，看看有啥新鲜事在发生。</p><p>所以时间分配上是：<strong>80%</strong>时间放在核心知识，剩余<strong>20%</strong>放在零散知识点和即时信息。</p><h3 id="搭建你的信息渠道"><a href="#搭建你的信息渠道" class="headerlink" title="搭建你的信息渠道"></a>搭建你的信息渠道</h3><p>每个人都有自己常用的信息渠道，常见的有几种：</p><ul><li>书籍</li><li>网络信息</li><li>社交圈</li></ul><p>举个例子：小郑，是区块链工程师，他本科通过计算机科学专业的学习，掌握了编程的技能，他通过阅读技术书籍来学习新的技术，提高自己的水平，有时候他也逛逛知名博客以及开发者社区，了解一些技术动向。此外，他每天通过Reddit或者微博，看到一些新鲜事，他通过数字货币交流群里获得一些币圈消息，也会看朋友圈里面，大家发了什么新动态。</p><p>那么怎么设计自己的信息获取渠道呢？推荐的方法如下：</p><ul><li>通过书籍、论文等来获得结构化的核心知识，比如一门学科、一种技术</li><li>通过杂志、网络的Wiki来辅助自己丰富要搭建的新知识结构，并且不断内化提升认知</li><li>通过朋友、社交网络来获取一手的新闻，但是前提是要加以甄别，做一个批判性信息收集者</li></ul><p>时间上：</p><ul><li>挤出大块的时间来啃结构化的核心知识（比如上学、上班期间，周末的一大块时间，集中精力攻克）</li><li>抽出一小块时间，浏览零散的信息（如微信公众号、社区文章、杂志等，也可以收藏以后再看，或者通过语音听取知识付费的文章）</li><li>利用碎片时间，瞥一下最新的快讯、新闻、消息推送（如ReadHub.me，消息来了看一眼，有个基本的判断就得了，不重要的略过，重要的要进入下一步）</li></ul><p>行动上：</p><ul><li>知道什么信息从什么地方获取，节省你的精力和时间（比如，你想知道怎么开发Android App，你有一个朋友就是做这个的，问问他就是了）</li><li>更加靠近准确信息的源头，有助于提升信息即时性和有效性</li><li>提高敏感度和执行力，核心知识上做好准备，得到最新消息后立即行动</li></ul><h3 id="最重要的还是我们自己"><a href="#最重要的还是我们自己" class="headerlink" title="最重要的还是我们自己"></a>最重要的还是我们自己</h3><p>无论收集的信息多么准确，多么及时，圈子多么大，最重要的还是我们自己，对关键信息是否敏感，对于信息的提取和利用是否有效。</p><p>如果对关键信息不敏感，那么也还是抓不住机会，比如，很早就知道比特币的人，可能通过朋友之口或者某个文章得知，但最终知道了就知道了，并没有深挖，也没有进一步行动，最终大腿拍烂，而有的人，抓住了一个信息，深挖下去，获得了回报。</p><p>对信息的提取和利用，如果获得了信息，首先要评判信息的真伪可靠性，做一些基本的调查和过滤，才能为你所用，而不能听风就是雨，这样你将会成为信息的奴隶，而不是信息的主人。</p><p>那么我们就要有意地锻炼自己的信息敏感度和提取信息、利用信息的能力，得到最新的消息，要试着想想这个消息蕴含着什么隐藏信息，是否代表着什么趋势和潮流，值不值得深挖下去。如果值得，那么深挖下去就好了，最终将信息为你所用。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>信息，总是无处不在的，在于你用发现的眼光去看待它，并且找到一种合适的方法， 沉淀下来，最终成为你的一部分。</p><p>感谢转载：<a href="https://bibodeng.com/" rel="external nofollow noopener noreferrer" target="_blank">https://bibodeng.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人是一台“电脑”&quot;&gt;&lt;a href=&quot;#人是一台“电脑”&quot; class=&quot;headerlink&quot; title=&quot;人是一台“电脑”&quot;&gt;&lt;/a&gt;人是一台“电脑”&lt;/h2&gt;&lt;p&gt;假如将人比作一台电脑，需要输入信息，存储数据，运算思考，输出表达。而其中输入信息，作为第一步，也是非常重要的。那么作为一个成年人，应当怎么样去收集信息，才能够尽可能快，尽可能全面呢？&lt;/p&gt;
&lt;p&gt;从小到大，其实从来没有人教过我们如何收集信息，而这看起来好像是一个无意识的过程。不就是刷刷微博、看看新闻、读读书、看看文章嘛，大家都会嘛。然而，这种无意识，往往不是最有效的方式，甚至会让你觉得非常苦恼。&lt;/p&gt;
&lt;p&gt;我一直在思考这个问题，如何搭建自己的信息收集渠道？因为过去收集信息，没有一个完整的体系，都是无头的苍蝇，乱撞。在浏览信息的时候，还容易因为一些别的话题将注意力分散开，像猴子掰玉米一样，大量的时间花在不断地分心上面，真正关心的信息却没有找到。&lt;/p&gt;
    
    </summary>
    
      <category term="知识" scheme="https://8bun.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="信息" scheme="https://8bun.github.io/tags/%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>我对记忆的总结</title>
    <link href="https://8bun.github.io/2019/06/29/%E6%88%91%E5%AF%B9%E8%AE%B0%E5%BF%86%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>https://8bun.github.io/2019/06/29/我对记忆的总结/</id>
    <published>2019-06-29T11:23:57.000Z</published>
    <updated>2019-07-23T09:12:45.372Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>重复记忆的时间不要超过2天；</p></li><li><p>不加思考的盲目记笔记是低效率的记忆方式；</p></li><li><p>“烂笔头”实现的“好记性”前提是思考和理解。</p></li><li><p>记忆也有试炼法记忆，此法适合于纠错（如常识性错误、意识性错误以及容易忽略的地方）;</p></li><li><p>人的状态和记忆效果有很大的关系，适当调整和休息（洗脸、洗澡等）有利于更高效的记忆。</p></li><li>实践是巩固记忆的重要途径，实践的方法的本质是”重复“，比如，对于重复记忆难以记住的内容，需要采用另外一种辅助记忆的形式去记忆，比如记忆科目三的路线，你可以看完视频后自己在纸上描绘路线以及一些注意点，然后再比对，你对知识错漏点就有了更加清晰的认识了；如果对于自己难以总结的内容，就可以采取询问的方式帮助自己记忆和总结，询问的帮助提高记忆的效率有时比你自己思考来的更高，比如记住某个高铁站的结构，当然最后还要加以自己的思考。实践证明，重复所能巩固这段记忆的效果比自己去摸索来得更好，是一种牺牲时间成本换取高效率的方式。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;重复记忆的时间不要超过2天；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不加思考的盲目记笔记是低效率的记忆方式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“烂笔头”实现的“好记性”前提是思考和理解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记忆也有试炼法记忆，此法适合于纠错（
      
    
    </summary>
    
      <category term="规律" scheme="https://8bun.github.io/categories/%E8%A7%84%E5%BE%8B/"/>
    
    
      <category term="记忆" scheme="https://8bun.github.io/tags/%E8%AE%B0%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>XDebug断点调试的工作原理</title>
    <link href="https://8bun.github.io/2019/06/29/XDebug%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://8bun.github.io/2019/06/29/XDebug断点调试的工作原理/</id>
    <published>2019-06-29T08:07:32.000Z</published>
    <updated>2019-07-03T10:27:50.103Z</updated>
    
    <content type="html"><![CDATA[<p>对于PHP开发，初来咋到，开发环境的搭建和理解感觉是最操逼的一件事了。不像JAVA，打开一个Eclipse就可以开搞，Php的Debug都要几个插件来配合工作。这些都是死的，好说。</p><p>对于Xdebug , 我的总结是：</p><a id="more"></a><p>Xdebug的工作原理可以总结为下面几个步骤，</p><p>1）IDE（比如PhpStorm，下文所述的客户端）中已经集成了一个遵循BGDp的Xdebug插件。当要debug的时候，点击一些IDE的某个按钮，启动这个插件。该插件会启动一个9000的端口监听远程服务器发过来的debug信息。</p><p>2）浏览器向Httpd（Apache）服务器发送一个带有<code>XDEBUG_SESSION_START</code>参数的请求，Httpd收到这个请求之后交给后端的PHP进行处理（下面就忽略Httpd，直接把Php叫做Server）。</p><p>3）Php看到这个请求是带了<code>XDEBUG_SESSION_START</code> 参数，就告诉Xdebug，“嘿，我要debug喔，你准备一下”。这时，Xdebug这时会向来源ip客户端的9000端口（即客户端，也即是IDE）发送一个debug请求，然后客户端的9000端口响应这个请求，那么debug就开始了。</p><p>4）Php知道Xdebug已经准备好了，那么就开始开始一行一行的执行代码，但是每执行一行都会让Xdebug过滤一下。</p><p>5）Xdebug开始过滤代码，Xdebug在过滤每一行代码的时候，都会暂停代码的执行，然后向客户端的9000端口发送该行代码的执行情况，等待客户端的决策（是一句代码还是下一个断点待）。</p><p>6）相应，客户端（IDE）收到Xdebug发送过来的执行情况，就可以把这些信息展示给开发者看了，包括一些变量的值等。同时向Xdebug发送下一步应该什么。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于PHP开发，初来咋到，开发环境的搭建和理解感觉是最操逼的一件事了。不像JAVA，打开一个Eclipse就可以开搞，Php的Debug都要几个插件来配合工作。这些都是死的，好说。&lt;/p&gt;
&lt;p&gt;对于Xdebug , 我的总结是：&lt;/p&gt;
    
    </summary>
    
      <category term="调试" scheme="https://8bun.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
      <category term="XDebug" scheme="https://8bun.github.io/tags/XDebug/"/>
    
  </entry>
  
  <entry>
    <title>Vue之组件传值</title>
    <link href="https://8bun.github.io/2019/05/13/Vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>https://8bun.github.io/2019/05/13/Vue之组件传值/</id>
    <published>2019-05-13T10:57:55.000Z</published>
    <updated>2019-05-13T12:27:56.357Z</updated>
    
    <content type="html"><![CDATA[<p>在学习前端框架Vue时，遇到了组件之间的传值问题，索性take a note。</p><a id="more"></a><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h2 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h2><p>父子关系即是组件 A 在它的模板中使用了组件 B，那么组件 A 就是父组件，组件 B 就是子组件。</p><p>我们可以这样理解：Vue实例就是一个父组件，而我们定义的组件（包括全局组件、私有组件）就都是子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个子组件</span><br><span class="line">Vue.component('child', &#123;</span><br><span class="line">    data: function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            text: '我是father的子组件！'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span><br><span class="line">&#125;)</span><br><span class="line">// 注册一个父组件</span><br><span class="line">Vue.component('father', &#123;</span><br><span class="line">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'  //在模板中使用了child组件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接使用father组件的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;father&gt;&lt;/father&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>页面中就会渲染出 ：我是father的子组件！</p><p>father 组件在模板中使用了 child 组件，所以它就是父组件，child 组件被使用，所以 child 组件就是子组件。</p><h4 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h4><p>两个组件互不引用，则为兄弟组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;brother1&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;div&gt;我是大哥&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&apos;brother2&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;div&gt;我是小弟&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用组件的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;brother1&gt;&lt;/brother1&gt;</span><br><span class="line">    &lt;brother2&gt;&lt;/brother2&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>页面中就会渲染出 ：</p><p>我是大哥</p><p>我是小弟</p><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><p>子组件想要使用父组件的数据，我们需要通过子组件的 props 选项来获得父组件传过来的数据。以下我使用在 .vue 文件中的格式来写例子。</p><p>在父组件 father.vue 中引用子组件 child.vue，把 name 的值传给 child 组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// child.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span&gt;Hello &#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123; </span><br><span class="line">        // 在 props 中声明获取父组件的数据通过 message 传过来，message为值的标签</span><br><span class="line">        props: [&apos;message&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//father.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        // message 定义在子组件的 props 中，message为值的标签，name为值的key</span><br><span class="line">        &lt;child :message=&quot;name&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import child from &apos;./child.vue&apos;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            child</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &apos;World&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面会渲染出Hello World</p><p>举例2：</p><p>在父组件传值的子组件内部定义prop数组，将父组件内部的data内部要传的数据的名称作为子组件引用值的属性的值，</p><p>如，有子组件component1，父组件div，在父组件内部引用子组件，子组件使用父组件的值，</p><p>要传父组件data中的msg：’父组件中的数据’，在子组件使用父组件的值时，如下使用v-bind定义属性名parent-msg作为使用值的标签（你也可以设置为:parentMsg）所以，在目的地子组件内部定义prop属性，值设置为parentMsg（驼峰式命名的 prop 需要转换为相对应的短横线隔开式 is-show）。然后:parentMsg的值，为msg（要传父组件data中的值的keyName）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三步：父组件在引用子组件的时候， 通过 属性绑定（v-bind:）的形式,  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--把需要传递给子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component1</span> <span class="attr">v-bind:parent-msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">component1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义子组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第二步：在子组件的模板中，使用props中的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>我是子组件。我想使用父组件中的数据parentMsg： &#123;&#123; parentMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,  <span class="comment">//在外面定义了id为app的组件作为父组件</span></span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">'父组件中的数据'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//自定义组件</span></span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 自定义组件作为子组件时默认无法访问到父组件中的 data 中的数据 和 methods 中的方法</span></span></span><br><span class="line"><span class="javascript">                component1: &#123; <span class="comment">//将组件的名称定义为 component1</span></span></span><br><span class="line"><span class="javascript">                    template: <span class="string">'#myTemplate'</span>,  <span class="comment">//在外面定义了id为myTemplate的template</span></span></span><br><span class="line"><span class="javascript">                    data() &#123; <span class="comment">// 注意： 自定义组件中的 data 数据，并不是通过 父组件传递过来的，而是组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上；</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// data 上的数据，都是可读可写的</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            title: <span class="string">'自定义组件私有的数据 title'</span>,</span></span><br><span class="line"><span class="javascript">                            content: <span class="string">'自定义组件私有的数据 content'</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">             </span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意： 组件中的 所有 props 中的数据，都是通过 父组件 传递给子组件的</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// props 中的数据，都是只读的，无法重新赋值</span></span></span><br><span class="line"><span class="javascript">                    props: [<span class="string">'parentMsg'</span>], <span class="comment">// 第一步：把父组件传递过来的 parentMsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据</span></span></span><br><span class="line"><span class="undefined">                    directives: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    filters: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    methods: &#123;</span></span><br><span class="line"><span class="undefined">                        change() &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 下面这行会报错，因为子组件不要直接修改父组件中的data数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// this.parentMsg = '被修改了'</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子组件中，data中的数据和props中的数据的区别</strong>：</p><ul><li>子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上。props 中的数据，都是通过 父组件 传递给子组件的。</li><li>data中的数据是可读可写的；props中的属性只是可读的，无法重新赋值，重新赋值会报错（也就是说，子组件不要直接去修改父组件中的数据）。</li></ul><h2 id="父组件将方法传递给子组件"><a href="#父组件将方法传递给子组件" class="headerlink" title="父组件将方法传递给子组件"></a>父组件将方法传递给子组件</h2><blockquote><p>父组件通过事件绑定机制，将父组件的方法传递给子组件</p></blockquote><p>代码举例：</p><p>下面例子，我们来演示 当点击子组件的按钮时，拿到父组件传递过来的 方法，并调用这个方法</p><p>我们在子组件的method中定义了一个函数来实现调用父组件的show函数，通过调用$emit函数，在子组件地方使用了@关键字来表示要调用父组件的事件属性parent-show，然后将函数名作为值，此时，对于$emit函数，我们使用事件属性名parent-show作为参数传入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父组件向子组件 传递 方法，是通过 事件绑定机制； v-on。当我们自定义了 一个 事件属性 parent-show（这个地方不能用驼峰命名）之后，--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 那么，子组件就能够，通过 emit 来调用 传递进去的 这个 方法了 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 【第一步】。意思是说，show是父组件的方法名，parent-show是自定义的事件属性，稍后要在子组件中用   到 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component1</span> @<span class="attr">parent-show</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">component1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义子组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 【第二步】按照正常的写法来：点击按钮，调用子组件的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>我是子组件，点击调用父组件的方法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,  </span></span><br><span class="line"><span class="javascript">            data: &#123; <span class="comment">//父组件的data</span></span></span><br><span class="line"><span class="undefined">               </span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 定义父组件的show方法</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'父组件提供的方法'</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                component1: &#123; <span class="comment">//将子组件的名称定义为 component1</span></span></span><br><span class="line"><span class="javascript">                    template: <span class="string">'#myTemplate'</span>,</span></span><br><span class="line"><span class="javascript">                    data() &#123; <span class="comment">// 子组件的data</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// content: '子组件私有的数据 content'</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    props: [<span class="string">''</span>],</span></span><br><span class="line"><span class="undefined">                    directives: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    filters: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    methods: &#123;</span></span><br><span class="line"><span class="undefined">                        childClick() &#123;</span></span><br><span class="line"><span class="undefined">              </span></span><br><span class="line"><span class="javascript">                            <span class="comment">//  emit 英文原意： 是触发，调用、发射。意思是，触发父组件的方法</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 【第三步】 在子组件的方法中，通过 emit 触发父组件的方法</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.$emit(<span class="string">'parent-show'</span>);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：（点击子组件，触发了父组件的方法）</p><p>在这个过程中，我们对父组件传递的show的参数做一点点修改增加了两个参数，并实现将两个参数的值打印出来。</p><p>所以，在调用$emit函数的时候，就必须多传入两个参数。这样，我们实现了在子组件内部将数据作为参数传入到父组件。</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component1</span> @<span class="attr">parent-show</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">component1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义子组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>我是子组件，点击调用父组件的方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">            data: &#123; <span class="comment">//父组件的data</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// msg: '父组件中的数据'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            methods: &#123; <span class="comment">// 定义父组件的方法</span></span></span><br><span class="line"><span class="javascript">                show: <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123; <span class="comment">//【第二步】父组件里放两个参数，这个两个参数就代表着子组件中的`child 123`、`child 789`</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'父组件提供的方法'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'打印子组件传递过来的参数。参数一：'</span> + arg1 + <span class="string">'，参数二：'</span>+ arg2);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                component1: &#123; <span class="comment">//将子组件的名称定义为 component1</span></span></span><br><span class="line"><span class="javascript">                    template: <span class="string">'#myTemplate'</span>,</span></span><br><span class="line"><span class="javascript">                    data() &#123; <span class="comment">// 子组件的data</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// content: '子组件私有的数据 content'</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    props: [<span class="string">''</span>],</span></span><br><span class="line"><span class="undefined">                    directives: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    filters: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    methods: &#123;</span></span><br><span class="line"><span class="undefined">                        childClick() &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 子组件如果要给父组件传递参数，在触发 emit 的时候，通过参数的形式带出去就可以了</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 【第一步】在子组件里，我们带两个参数出去，传给父组件</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.$emit(<span class="string">'parent-show'</span>, <span class="string">'child 123'</span>, <span class="string">'child 789'</span>);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们还可以将子组件中的data数据传递给父组件，存放到父组件的data中，</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component1</span> @<span class="attr">parent-show</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">component1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义子组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>我是子组件，点击调用父组件的方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">            data: &#123; <span class="comment">//父组件的data</span></span></span><br><span class="line"><span class="javascript">                parentData: <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            methods: &#123; <span class="comment">// 定义父组件的方法</span></span></span><br><span class="line"><span class="javascript">                show: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123; <span class="comment">//【第二步】父组件里放参数，这个参数就代表着子组件中的 child.data</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'父组件提供的方法'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.parentData = arg; <span class="comment">//将参数arg传递给父组件的data，也就达到了目的：子组件传递数据，赋值给父组件</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'打印父组件的数据（这是子组件传过来的）：'</span>+ <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.parentData));</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                component1: &#123; <span class="comment">//将子组件的名称定义为 component1</span></span></span><br><span class="line"><span class="javascript">                    template: <span class="string">'#myTemplate'</span>,</span></span><br><span class="line"><span class="javascript">                    data() &#123; <span class="comment">// 子组件的data</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            childData: &#123; <span class="comment">//定义自组件的数据</span></span></span><br><span class="line"><span class="javascript">                                name: <span class="string">'smyhvae'</span>,</span></span><br><span class="line"><span class="undefined">                                age: 26</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    props: [<span class="string">''</span>],</span></span><br><span class="line"><span class="undefined">                    directives: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    filters: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                    methods: &#123;</span></span><br><span class="line"><span class="undefined">                        childClick() &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 子组件如果要给父组件传递参数，在触发 emit 的时候，通过参数的形式带出去就可以了</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 【第一步】在子组件里，通过传参的形式，把子组件的data，传给父组件</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.$emit(<span class="string">'parent-show'</span>, <span class="keyword">this</span>.childData);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在Vue中，通过-ref-属性获取DOM元素"><a href="#在Vue中，通过-ref-属性获取DOM元素" class="headerlink" title="在Vue中，通过 ref 属性获取DOM元素"></a>在Vue中，通过 ref 属性获取DOM元素</h2><p>我们当然可以使用JS原生的做法（document.getElementById）或者 jQuery 来获取DOM，但是这种做法却在无形中操作了DOM，在Vue框架中并不推荐这种做法。</p><p>我们可以通过<code>ref</code>属性获取DOM元素。</p><p><code>ref</code>的英文单词是<strong>reference</strong>，表示<strong>引用</strong>。我们平时可以经常看到控制台会报错<strong>referenceError</strong>的错误，就和引用类型的数据有关。</p><p><strong>在Vue中，通过 ref 属性获取DOM元素</strong>的步骤：</p><p>（1）第一步：在标签中给 DOM 元素设置 ref 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"myH3"</span> <span class="attr">ref</span>=<span class="string">"myTitle"</span>&gt;</span> 今天天气太好了<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）第二步：通过 this.this.$refs.xxx 获取 DOM 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myTitle.innerText)</span><br></pre></td></tr></table></figure><p><strong>举例如下</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第一步：在标签中给 DOM 元素设置 ref 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"myH3"</span> <span class="attr">ref</span>=<span class="string">"myTitle"</span>&gt;</span> 今天天气太好了<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮元素"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"myBtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">            template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">'son msg'</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                show() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'调用了子组件的方法'</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                getElement() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 原生js获取DOM元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(document.getElementById('myTitle').innerText)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 第二步：通过 this.this.$refs.xxx 获取 DOM 元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myTitle.innerText)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="undefined">                login</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行上方代码，然后我们在控制台输入<code>vm</code>，就可以看到：</p><p><img src="https://camo.githubusercontent.com/56140fc4fee1cdb5da336aa956e6267bec9af65d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303730315f313634302e706e67" alt="img"></p><h3 id="使用-ref-属性获取整个子组件"><a href="#使用-ref-属性获取整个子组件" class="headerlink" title="使用 ref 属性获取整个子组件"></a>使用 ref 属性获取整个子组件</h3><p>根据上面的例子，我们可以得出<strong>规律</strong>：只要<code>ref</code>属性加在了DOM元素身上，我们就可以获取这个DOM元素。</p><p>那我们可以通过ref属性获取整个<strong>Vue子组件</strong>吗？当然可以。这样做的意义是：**在父组件中通过<code>ref</code>属性拿到了子组件之后，就可以进一步拿到子组件中的data和method。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击按钮"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">login-component</span> <span class="attr">ref</span>=<span class="string">"loginTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">login-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                getElement() &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//在父组件中，通过ref获取整个子组件，进而获取子组件的data</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.loginTemplate.myData)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//在父组件中，通过ref获取整个子组件，进而获取子组件的method</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$refs.loginTemplate.showMethod()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">'login-component'</span>: &#123;</span></span><br><span class="line"><span class="xml">                    template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="undefined">                    data() &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            myData: <span class="string">'子组件的data'</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    methods: &#123;</span></span><br><span class="line"><span class="undefined">                        showMethod() &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">'调用子组件的method'</span>)</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行代码，点击按钮后，效果如下：</p><p><a href="https://camo.githubusercontent.com/49a57cccd023100015599065f39503c546406880/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303730315f313733352e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/49a57cccd023100015599065f39503c546406880/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303730315f313733352e706e67" alt="img"></a></p><p>我们直接在控制台输入<code>vm</code>，可以看到：</p><p><a href="https://camo.githubusercontent.com/6d6f1c71838fbfc034f4cb61bfb107957b545291/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303730315f313734302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/6d6f1c71838fbfc034f4cb61bfb107957b545291/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303730315f313734302e706e67" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习前端框架Vue时，遇到了组件之间的传值问题，索性take a note。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://8bun.github.io/categories/Vue/"/>
    
    
      <category term="组件传值" scheme="https://8bun.github.io/tags/%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>网络之集线器、交换机和路由器异同之处</title>
    <link href="https://8bun.github.io/2019/05/10/%E7%BD%91%E7%BB%9C%E4%B9%8B%E9%9B%86%E7%BA%BF%E5%99%A8%E3%80%81%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E5%BC%82%E5%90%8C%E4%B9%8B%E5%A4%84/"/>
    <id>https://8bun.github.io/2019/05/10/网络之集线器、交换机和路由器异同之处/</id>
    <published>2019-05-10T11:43:50.000Z</published>
    <updated>2019-05-10T12:55:39.504Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，网络上数据包的传输需要经过集线器、交换机、路由器等设备，它们之间的紧密合作将各方各地的信息相互联系起来，起到了十分重要的作用。</p><p><strong>信号从网卡流出进入网线的过程如下：</strong></p><p>网卡中的PHY(物理层装置，以前低速方式中则称为介质连接单元，即MAU)模块将包转换为电信号之后，信号通过RJ-45接口进入双绞线。【以太网信号的本质是正负变化的电压，使用双绞线可以抵消螺旋产生噪声电流，抑制噪声】</p><p>然后，信号达到了集线器，这个过程中信号会因各种因素而衰减。</p><a id="more"></a><p>集线器将信号发给所有连接的线路，集线器的接口有一个为MDI/MDI-X切换开关，MDI（媒体相关接口）是对RJ-45接口和信号收发模块进行直连连线，而MDI-X则是交叉连线。由于集线器的接口一般为MDI-X模式，要将两台集线器相连时，就需要将其中一台改成MDI模式。如果集线器上没有MDI切换开关，而且所有的接口又都是MDI-X时，可以用交叉网线连接两台集线器。所谓交叉连线，就是讲发送和接收信号线反过来接的网线。</p><p>也就是说，网卡和集线器直接可以相连，网卡间也可以互连。</p><p>然后，信号到达集线器的PHY(MAU)模块之后，会进入中继电路。中继电路的基本功能是将信号进行广播到集线器的所有端口上，连接在端口上的计算机接收到这条广播信息时，会对信息进行检查，如果发现该信息是发给自己的，则接收，否则不予理睬。</p><p>不过，在将计算机直接连接在集线器上之前，是通过交换机来进行包的转发的，然后抵达集线器。</p><p>交换机也具有多个端口，每个端口都有独立的PHY(MAU)、MAC（不具有MAC地址）和内存，一般都是通过一个控制芯片来同时控制多个端口。</p><p>交换机内部具有对转发的包进行缓存的缓冲区以及记录转发包的接收方MAC地址以及对应的端口、控制信息等的MAC地址表，端口和MAC地址是一一对应的（设备连接在交换机端口上）。MAC地址表是具有定时清除的功能。交换机的构造决定了其具有全双工的功能，可同时进行接收和发送。</p><p>网络包到达集线器的广播和交换机的转发之后，就到达了路由器了。</p><p>路由器是基于IP进行设计的，路由器内部也具有路由表，其记录的信息项为目标IP地址、子网掩码、网关、接口、跃点数等，通过进行查表判断转发目标。路由器的各个端口模块各不相同，其中包含ADSL、FTTH、通信线路、无线局域网、以太网端口等。经过哪个端口的工作过程是取决于端口对应的通信技术。如果数据包过大，则可能进行分片操作。接收包进来之后，模块会在路由表中查询包应该转发的端口。通过查询到表中IP对应的网关，如果网关为空，则IP头部中接收方IP地址就是下一个转发目标；否则，网关地址则为下一个转发目标。路由器也会根据ARP进行查询IP对应下一个转发目标的MAC地址，即转发给下一个对应的路由器。</p><p>此外，在内网和互联网进行相连的过程中，路由器还可被人为地加入设计成进行地址的转换的设备群，一个公有地址可分配给多个私有内网地址（：端口号）。另外，根据一些设定的规则，路由器还可设定为包的过滤（相当于防火墙）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，网络上数据包的传输需要经过集线器、交换机、路由器等设备，它们之间的紧密合作将各方各地的信息相互联系起来，起到了十分重要的作用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号从网卡流出进入网线的过程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网卡中的PHY(物理层装置，以前低速方式中则称为介质连接单元，即MAU)模块将包转换为电信号之后，信号通过RJ-45接口进入双绞线。【以太网信号的本质是正负变化的电压，使用双绞线可以抵消螺旋产生噪声电流，抑制噪声】&lt;/p&gt;
&lt;p&gt;然后，信号达到了集线器，这个过程中信号会因各种因素而衰减。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://8bun.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="集线器" scheme="https://8bun.github.io/tags/%E9%9B%86%E7%BA%BF%E5%99%A8/"/>
    
      <category term="交换机" scheme="https://8bun.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="路由器" scheme="https://8bun.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue之事件修饰符</title>
    <link href="https://8bun.github.io/2019/05/07/Vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://8bun.github.io/2019/05/07/Vue之事件修饰符/</id>
    <published>2019-05-07T14:17:40.000Z</published>
    <updated>2019-05-10T12:56:12.403Z</updated>
    
    <content type="html"><![CDATA[<p>这些时间自学 Vue 框架，遇到了其事件修饰，感觉挺有意思的，索性写一下它们的区别和联系。</p><p>Vue提供了很多事件修饰符来辅助实现一些功能。</p><p>常见的事件修饰符有如下：</p><ul><li><code>.stop</code> 阻止冒泡。本质是调用 event.stopPropagation()。</li><li><code>.prevent</code> 阻止默认事件（默认行为）。本质是调用 event.preventDefault()。</li><li><code>.capture</code> 添加事件监听器时，使用捕获的方式（也就是说，事件采用捕获的方式，而不是采用冒泡的方式）。</li><li><code>.self</code> 只有当事件在该元素本身（比如不是子元素）触发时，才会触发回调。</li><li><code>.once</code> 事件只触发一次。</li></ul><a id="more"></a><p>注意：<strong>一个事件，允许同时使用多个事件修饰符。</strong></p><p>这里，稍微扯一下冒泡和捕获的概念的区别。</p><p>首先，假设有这样一个场景，有一个父div容器包含了一个子div容器。</p><p>如果我们对父div容器设定了点击触发事件，同时对子div也设定了一个点击触发事件。</p><p>这时，我们由于包含关系，在默认情况下，点击子div会随之触发父div点击事件，这样的情况由于是向上一级</p><p>触发的，类似于向上冒泡的行为，所以我们称之为<strong>“冒泡”</strong>。</p><p>相反的，如果点击触发父容器事件而引发了子容器事件的触发，这种向下一级的触发的，则称之为<strong>“捕获”</strong>。</p><p>而.stop就可以实现阻止冒泡自行为的继续下去，.self也可实现该功能，但是有一个限制，就是只能在被此修饰符修饰的标签自身阻止自身被冒泡，只有点击他本身时才去执行此操作，点击他的其他关联元素不去执行此操作，也就是说，只有点击他本身才可以。而.stop是从修饰的标签所在的内外结构中，由最内层开始冒泡到，如果是。</p><p>而相反的，.capture则是从修饰的标签所在的内外结构中，由最外层开始阻止向下一级触发事件。</p><p>下面来举几个例子：</p><p>(1).stop <strong>（阻止事件继续传播 即阻止它的捕获和冒泡过程）</strong><br>实例：如下点击内部点击，阻止了冒泡过程，即只执行tz这个方法，如果不加.stop，讲先执行方法，后执行gett方法。即通过了冒泡这个过程。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"gett"</span>&gt;</span>外部点击</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click.stop</span>=<span class="string">"tz"</span>&gt;</span>内部点击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）.prevent <strong>（阻止默认事件发生 即event.preventdefault(): ）</strong><br>实例： 阻止了a标签的默认刷新，点击超链接将不会实现跳转。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">v-on:click.prevent</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）.capture  <strong>（添加事件监听器时使用事件捕获模式，即在捕获模式下触发）</strong><br>实例：在点击最里层的点击6时，gett方法先执行，因为gett方法在捕获模式执行的，先与冒泡事件。下列执行顺序 geet-&gt;set-&gt;tz ,因为后俩个还是冒泡模式下触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"gett"</span>&gt;</span>外部点击5</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click</span>=<span class="string">"tz"</span>&gt;</span>内部点击5</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click</span>=<span class="string">"set"</span>&gt;</span>点击6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）.self <strong>（当前元素自身时触发处理函数时才会触发函数，原理：是根据event.target确定是否当前元素本身，来决定是否触发的事件/函数 ）</strong><br>实例：如果点击内部点击2，冒泡不会执行gett方法，因为event.target指的是内部点击2的dom元素，不是外部点击1的，所以不会触发自己的点击事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"gett"</span>&gt;</span>外部点击1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"tz"</span>&gt;</span>内部点击2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（5）.once <strong>（只触发一次）</strong><br>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.once</span>=<span class="string">"tz"</span>&gt;</span>once<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>全部代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/mui.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"gett"</span> &gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"gett"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"gett"</span>&gt;</span>外部点击</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click.stop</span>=<span class="string">"tz"</span>&gt;</span>内部点击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">v-on:click.prevent</span>&gt;</span>dsfs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"gett"</span>&gt;</span>外部点击1</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click</span>=<span class="string">"tz"</span>&gt;</span>内部点击2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"gett"</span>&gt;</span>外部点击5</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click</span>=<span class="string">"tz"</span>&gt;</span>内部点击5</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click</span>=<span class="string">"set"</span>&gt;</span>点击6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-on:click.once</span>=<span class="string">"tz"</span>&gt;</span>once<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'a'</span>&gt;</span>外部点击3</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">'b'</span>&gt;</span>内部点击4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/mui.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            mui.init()</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">                data: &#123;</span></span><br><span class="line"><span class="javascript">                    name:<span class="string">'张三'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                methods:&#123;</span></span><br><span class="line"><span class="javascript">                    gett:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"111"</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.name=<span class="string">'李四'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    tz:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="undefined">                        alert(222)</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">set</span>:function(e)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="undefined">                        alert(333)</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'aaaa'</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'bbbb'</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些时间自学 Vue 框架，遇到了其事件修饰，感觉挺有意思的，索性写一下它们的区别和联系。&lt;/p&gt;
&lt;p&gt;Vue提供了很多事件修饰符来辅助实现一些功能。&lt;/p&gt;
&lt;p&gt;常见的事件修饰符有如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.stop&lt;/code&gt; 阻止冒泡。本质是调用 event.stopPropagation()。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.prevent&lt;/code&gt; 阻止默认事件（默认行为）。本质是调用 event.preventDefault()。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.capture&lt;/code&gt; 添加事件监听器时，使用捕获的方式（也就是说，事件采用捕获的方式，而不是采用冒泡的方式）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.self&lt;/code&gt; 只有当事件在该元素本身（比如不是子元素）触发时，才会触发回调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.once&lt;/code&gt; 事件只触发一次。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://8bun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://8bun.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="前端框架" scheme="https://8bun.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="事件修饰符" scheme="https://8bun.github.io/tags/%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-使用递归解决括号生成问题</title>
    <link href="https://8bun.github.io/2019/05/06/LeetCode-%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90%E9%97%AE%E9%A2%98/"/>
    <id>https://8bun.github.io/2019/05/06/LeetCode-使用递归解决括号生成问题/</id>
    <published>2019-05-06T04:20:35.000Z</published>
    <updated>2019-05-06T04:25:07.825Z</updated>
    
    <content type="html"><![CDATA[<p>问题可见：<a href="https://leetcode.com/problems/generate-parentheses/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems/generate-parentheses/</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定<em>n</em>对括号，编写一个函数来生成格式正确的括号的所有组合。</p><p>例如，给定<em>n</em> = 3，解集是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>思路：</p><p>意题的英文给你<code>n</code>值，让你找到所有格式正确的圆括号匹配组，中题目给出已经了<code>n = 3</code>的所有查询查询结果。遇到这种问题，第一直觉就是用到递归或者堆栈，我们选取递归来解决，也就是<code>helper</code>函数的功能，从参数上来看肯定很好理解了，<code>leftRest</code>代表还有几个左括号可以用，<code>rightNeed</code>代表还需要几个右括号才能匹配，初始状态当然是<code>rightNeed = 0, leftRest = n</code>，递归的终止状态就是<code>rightNeed == 0 &amp;&amp; leftRest == 0</code>，也就是左右括号都已匹配完毕，把然后<code>str</code>加入到链表中即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//初始先有(,)是根据(的添加之后才产生的</span></span><br><span class="line"><span class="comment">//终止条件为(和)均为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getList</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        helper(list,<span class="string">""</span>,n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;String&gt; list, String str, <span class="keyword">int</span> LeftRest,<span class="keyword">int</span> RightNeed)</span></span>&#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(LeftRest==<span class="number">0</span>&amp;&amp;RightNeed==<span class="number">0</span>)&#123;</span><br><span class="line">            list.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span>(RightNeed&gt;<span class="number">0</span>) &#123;</span><br><span class="line">           helper(list, str + <span class="string">")"</span>, LeftRest, RightNeed - <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(LeftRest&gt;<span class="number">0</span>) &#123;</span><br><span class="line">           helper(list, str + <span class="string">"("</span>, LeftRest - <span class="number">1</span>, RightNeed + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> getList().generateParenthesis(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题可见：&lt;a href=&quot;https://leetcode.com/problems/generate-parentheses/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://leetcode.com/problems/generate-parentheses/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给定&lt;em&gt;n&lt;/em&gt;对括号，编写一个函数来生成格式正确的括号的所有组合。&lt;/p&gt;
&lt;p&gt;例如，给定&lt;em&gt;n&lt;/em&gt; = 3，解集是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;((()))&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;(()())&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;(())()&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;()(())&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;()()()&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://8bun.github.io/categories/LeetCode/"/>
    
      <category term="算法" scheme="https://8bun.github.io/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="https://8bun.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>JS跨域请求服务器数据的几种实用方法</title>
    <link href="https://8bun.github.io/2019/05/05/JS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://8bun.github.io/2019/05/05/JS跨域请求服务器数据的几种实用方法/</id>
    <published>2019-05-05T10:10:37.000Z</published>
    <updated>2019-07-03T11:13:06.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域与源"><a href="#域与源" class="headerlink" title="域与源"></a>域与源</h2><p>js跨域是指通过js在不同域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者说通过js获取页面中不同域的框架中(iframe)的数据。</p><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域。所谓同源是指，域名，协议，端口完全相同。</p><p><img src="https://images0.cnblogs.com/blog/130623/201307/15184526-1cfb09aa81c742c3bc80e56474ed4e74.png" alt="img"></p><p>而要实现跨域，我们可以使用一下几种方法：</p><a id="more"></a><h4 id="通过JSONP跨域"><a href="#通过JSONP跨域" class="headerlink" title="通过JSONP跨域"></a>通过JSONP跨域</h4><p>在js中，我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。</p><p>比如，有个a.html页面，它需要利用ajax获取一个不同域上的json数据。而这个json数据是来自<a href="http://example.com/data.php" rel="external nofollow noopener noreferrer" target="_blank">http://example.com/data.php</a>,代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">//通过_GET方法获取回调函数，即请求数据客户端和服务器之间事先约定好的函数，在数据被获取之后调用的函数</span></span><br><span class="line">$callback=$_GET[<span class="string">'callback'</span>];</span><br><span class="line">$data=<span class="keyword">array</span>[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]; <span class="comment">//数组</span></span><br><span class="line"><span class="comment">// echo会输出数据，适合于php与浏览器、 javascript之间进行通信，或者不同服务器之间进行通信</span></span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">'('</span>+json_encode($data).<span class="string">')'</span>; <span class="comment">//"."为字符串拼接符，json_encode方法将data数组转化为json格式并进行转码，此处调用了回调函数</span></span><br></pre></td></tr></table></figure><p>而此时a.html的代码就可以这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">jsondata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//处理获得的json数据</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//设置回调函数</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://example.com/data.php?callback=fun"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样jsonp的原理就很清楚了，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。</p><p>知道jsonp跨域的原理后我们就可以用js动态生成script标签来进行跨域操作了，而不用特意的手动的书写那些script标签。</p><p>如果你的页面使用jquery，那么通过它封装的方法就能很方便的来进行jsonp操作了。</p><p>那样你就不用多写一个script了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">'http://example.com/data.php?callback=?'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">jsondata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//处理获得的json数据          </span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们发现，以上调用的回调函数没有函数名，原理是这样的，jquery会为回调函数自动生成一个全局函数，这个函数名是随机的，这个生成的随机函数只是起一个临时代理函数的作用，随后任务完成后又会被销毁。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p><p>这里讲一下异步的概念：</p><p>我们在访问一个普通的网站时，当浏览器加载完<code>HTML、CSS、JS</code>以后，网站的内容就固定了。如果想让网站内容发生更改，就必须<strong>刷新</strong>页面才能够看到更新的内容。</p><p>可如果用到<strong>异步更新</strong>，情况就大为改观了。比如，我们在访问新浪微博时，看到一大半了，点击底部的<strong>加载更多</strong>，会自动帮我们加载更多的微博，同时页面并没有刷新。</p><p>试想一下，如果没有异步刷新的话，每次点击“加载更多”，网页都要刷新，体验就太不好了。</p><p>web前端里的异步更新，就要用到 Ajax。</p><ul><li>同步：必须等待前面的任务完成，才能继续后面的任务。</li><li>异步：不受当前任务的影响。</li></ul><p>拿排队举例：</p><ul><li>同步：在银行排队时，只有等到你了，才能够去处理业务。</li><li>异步：在排队的时候，可以玩手机。</li></ul><h4 id="通过修改document-domain来跨子域"><a href="#通过修改document-domain来跨子域" class="headerlink" title="通过修改document.domain来跨子域"></a>通过修改document.domain来跨子域</h4><p>有一个页面，它的地址是<a href="http://www.example.com/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.example.com/a.html</a>  ， 在这个页面里面有一个iframe，它的src是<a href="http://example.com/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://example.com/b.html</a>, 很显然，这个页面与它里面的iframe框架是不同域的，如果使用</p><p>iframe（iframe对象）.currentWindow，这是可以获取到iframe的window对象的，但是该获取的对象的属性和方法几乎是不可用的。所以我们是无法通过在页面中书写js代码来获取iframe中的东西的。</p><p>这时候，document.domain就可以派上用场了。</p><p>这个时候，document.domain就可以派上用场了，我们只要把<a href="http://www.example.com/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.example.com/a.html</a> 和 <a href="http://example.com/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://example.com/b.html</a>这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。例如：a.b.example.com 中某个文档的document.domain 可以设成a.b.example.com、b.example.com 、example.com中的任意一个，但是不可以设成 c.a.b.example.com,因为这是当前域的子域，也不可以设成baidu.com,因为主域已经不相同了。</p><p>在页面 <a href="http://www.example.com/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.example.com/a.html</a> 中设置document.domain:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">" http://www.example.com/b.html"</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">onload</span>=<span class="string">"test()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain=<span class="string">'example.com'</span>; <span class="comment">//设置成主域</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在页面 <a href="http://example.com/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://example.com/b.html</a> 中也设置document.domain，而且这也是必须的，虽然这个文档的domain就是example.com,但是还是必须显示的设置document.domain的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.domain=<span class="string">'example.com'</span>;  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们就可以通过js访问到iframe中的各种属性和对象了。</p><p>不过如果你想在<a href="http://www.example.com/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.example.com/a.html</a> 页面中通过ajax直接请求<a href="http://example.com/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://example.com/b.html</a> 页面，即使你设置了相同的document.domain也还是不行的，所以修改document.domain的方法只适用于不同子域的框架间的交互。</p><p>如果你想通过ajax的方法去与不同子域的页面交互，除了使用jsonp的方法外，还可以用一个隐藏的iframe来做一个代理。原理就是让这个iframe载入一个与你想要通过ajax获取数据的目标页面处在相同的域的页面，所以这个iframe中的页面是可以正常使用ajax去获取你要的数据的，然后就是通过我们刚刚讲得修改document.domain的方法，让我们能通过js完全控制这个iframe，这样我们就可以让iframe去发送ajax请求，然后收到的数据我们也可以获得了。</p><h4 id="使用window-name来进行跨域"><a href="#使用window-name来进行跨域" class="headerlink" title="使用window.name来进行跨域"></a>使用window.name来进行跨域</h4><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p><p>比如：有一个页面a.html,它里面有这样的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.name=<span class="string">'我是页面a设置的值'</span>;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location=<span class="string">'b.html'</span>;</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="number">3000</span>); <span class="comment">//3秒后把一个新页面b.html载入到当前的window</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再看看b.html页面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">alert(<span class="built_in">window</span>.name);  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.html页面载入后3秒，跳转到了b.html页面，结果为：</p><p><img src="https://images0.cnblogs.com/blog/130623/201307/15184537-26ab92ec8cdc444f8b9fa6fc62ed78fb.png" alt="QQæªå¾20130613230631"></p><p>我们看到在b.html页面上成功获取到了它的上一个页面a.html给window.name设置的值。如果在之后所有载入的页面都没对window.name进行修改的话，那么所有这些页面获取到的window.name的值都是a.html页面设置的那个值。</p><p>当然，如果有需要，其中的任何一个页面都可以对window.name的值进行修改。注意，window.name的值只能是字符串的形式，这个字符串的大小最大能允许2M左右甚至更大的一个容量，具体取决于不同的浏览器，但一般是够用了。</p><p>上面的例子中，我们用到的页面a.html和b.html是处于同一个域的，但是即使a.html与b.html处于不同的域中，上述结论同样是适用的，这也正是利用window.name进行跨域的原理。</p><p>下面就来看一看具体是怎么样通过window.name来跨域获取数据的。还是举例说明。</p><p>比如有一个<a href="http://www.example.com/a.html" rel="external nofollow noopener noreferrer" target="_blank">www.example.com/a.html</a>页面,需要通过a.html页面里的js来获取另一个位于不同域上的页面<a href="http://www.cnblogs.com/data.html" rel="external nofollow noopener noreferrer" target="_blank">www.cnblogs.com/data.html</a>里的数据。</p><p>data.html页面里的代码很简单，就是给当前的window.name设置一个a.html页面想要得到的数据值。data.html里的代码：</p><p><img src="https://images0.cnblogs.com/blog/130623/201307/15184539-7a190a2eb9d5464787a124f5e2c6a06d.png" alt="QQæªå¾20130613230631"></p><p>那么在a.html页面中，我们怎么把data.html页面载入进来呢？显然我们不能直接在a.html页面中通过改变window.location来载入data.html页面，因为我们想要即使a.html页面不跳转也能得到data.html里的数据。答案就是在a.html页面中使用一个隐藏的iframe来充当一个中间人角色，由iframe去获取data.html的数据，然后a.html再去得到iframe获取到的数据。</p><p>充当中间人的 iframe 想要获取到data.html的通过window.name设置的数据，只需要把这个iframe的src设为<a href="http://www.cnblogs.com/data.html" rel="external nofollow noopener noreferrer" target="_blank">www.cnblogs.com/data.html</a>就行了。然后a.html想要得到iframe所获取到的数据，也就是想要得到iframe的window.name的值，还必须把这个iframe的src设成跟a.html页面同一个域才行，不然根据前面讲的同源策略，a.html是不能访问到iframe里的window.name属性的。这就是整个跨域过程。</p><p>看下a.html页面的代码：</p><p><img src="https://images2015.cnblogs.com/blog/130623/201512/130623-20151207161022652-2118622654.png" alt="img"></p><p>上面的代码只是最简单的原理演示代码，你可以对使用js封装上面的过程，比如动态的创建iframe,动态的注册各种事件等等，当然为了安全，获取完数据后，还可以销毁作为代理的iframe。网上也有很多类似的现成代码，有兴趣的可以去找一下。</p><p>通过window.name来进行跨域，就是这样子的。</p><h4 id="使用HTML5中新引进的window-postMessage方法来跨域传送数据"><a href="#使用HTML5中新引进的window-postMessage方法来跨域传送数据" class="headerlink" title="使用HTML5中新引进的window.postMessage方法来跨域传送数据"></a>使用HTML5中新引进的window.postMessage方法来跨域传送数据</h4><p><strong>window.postMessage(message,targetOrigin)  方法</strong>是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。</p><p><strong>调用postMessage方法的对象为消息发送方的window对象</strong>，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 *  。</p><p>需要接收消息的window对象，可是通过监听自身的message事件来获取传过来的消息，<strong>消息内容储存在该事件对象的data属性中</strong>。</p><p>上面所说的向其他window对象发送消息，其实就是指一个页面有几个框架的那种情况，因为每一个框架都有一个window对象。在讨论第二种方法的时候，我们说过，不同域的框架间是可以获取到对方的window对象的，而且也可以使用window.postMessage这个方法。</p><p>下面看一个简单的示例，有两个页面。a.html中加载了b.html中的一个 iframe ，并加载页面的时候来自a.html中的iframe对象所绑定的window对象调用了发送了消息，而且接收方不限定域。这时在b.html页面中就可以获取数据了。</p><p><img src="https://images0.cnblogs.com/blog/130623/201307/15184545-4d435286d9974c65890ececbce8be9b7.png" alt="QQæªå¾20130613230631"></p><p><img src="https://images0.cnblogs.com/blog/130623/201307/15184546-6d54ada26b1a47cc8d856b0cd90d6017.png" alt="QQæªå¾20130613230631"></p><p>我们运行a页面后得到的结果:</p><p><a href="https://images0.cnblogs.com/blog/130623/201307/15184547-b7a7e7b771054807b112248f39201e53.png" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://images0.cnblogs.com/blog/130623/201307/15184547-c3c3317b3a674b9c8bfb65b1898e1829.png" alt="QQ截图20130613230631"></a></p><p>我们看到b页面成功的收到了消息。</p><p>使用postMessage来跨域传送数据还是比较直观和方便的，但是缺点是IE6、IE7不支持，所以用不用还得根据实际需要来决定。</p><p><strong>结语：</strong></p><p>除了以上几种方法外，还有flash、在服务器上设置代理页面等跨域方式，这里就不做介绍了。</p><p>以上四种方法，可以根据项目的实际情况来进行选择应用，个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p><p>本文感谢：<a href="https://www.cnblogs.com/2050/p/3191744.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/2050/p/3191744.html</a> 的帮助^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;域与源&quot;&gt;&lt;a href=&quot;#域与源&quot; class=&quot;headerlink&quot; title=&quot;域与源&quot;&gt;&lt;/a&gt;域与源&lt;/h2&gt;&lt;p&gt;js跨域是指通过js在不同域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者说通过js获取页面中不同域的框架中(iframe)的数据。&lt;/p&gt;
&lt;p&gt;只要协议、域名、端口有任何一个不同，都被当作是不同的域。所谓同源是指，域名，协议，端口完全相同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/130623/201307/15184526-1cfb09aa81c742c3bc80e56474ed4e74.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;而要实现跨域，我们可以使用一下几种方法：&lt;/p&gt;
    
    </summary>
    
      <category term="JS跨域请求" scheme="https://8bun.github.io/categories/JS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="服务器" scheme="https://8bun.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="JS" scheme="https://8bun.github.io/tags/JS/"/>
    
      <category term="请求数据" scheme="https://8bun.github.io/tags/%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    
      <category term="跨域" scheme="https://8bun.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://8bun.github.io/2019/04/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://8bun.github.io/2019/04/29/Java多线程/</id>
    <published>2019-04-29T04:37:54.000Z</published>
    <updated>2019-07-03T10:29:44.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>多个线程可以共享内存，而进程间不能共享内存，进程的创建需要重新分配系统资源，但创建线程的代价则小得多</li></ul><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><ul><li>一个浏览器能同时下载多个图片</li><li>一个Web服务器能同时响应多个用户请求</li><li>Java虚拟机本身就在后台提供了一个超级线程来进行垃圾回收</li><li>图形用户界面（GUI）也需要启动一个单独的线程来从主机环境中收集用户界面事件</li><li>and so on</li></ul><a id="more"></a><h3 id="使用继承Thread和实现Runnable接口两种方式创建线程的对比"><a href="#使用继承Thread和实现Runnable接口两种方式创建线程的对比" class="headerlink" title="使用继承Thread和实现Runnable接口两种方式创建线程的对比"></a>使用继承Thread和实现Runnable接口两种方式创建线程的对比</h3><ol><li>实现Runnable接口方式：<ul><li>线程类还可继承其他类</li><li>需使用 Thread. currentThread () 访问当前线程</li><li>避免了单继承的局限性、多个线程可以共享一个target对象，非常适合多线程处理同一份资源的情形。</li></ul></li><li>继承Thread的方式：<ul><li>不能再继承其他父类</li><li>可直接使用 this 访问当前线程</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多个线程可以共享内存，而进程间不能共享内存，进程的创建需要重新分配系统资源，但创建线程的代价则小得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实际应用&quot;&gt;&lt;a href=&quot;#实际应用&quot; class=&quot;headerlink&quot; title=&quot;实际应用&quot;&gt;&lt;/a&gt;实际应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个浏览器能同时下载多个图片&lt;/li&gt;
&lt;li&gt;一个Web服务器能同时响应多个用户请求&lt;/li&gt;
&lt;li&gt;Java虚拟机本身就在后台提供了一个超级线程来进行垃圾回收&lt;/li&gt;
&lt;li&gt;图形用户界面（GUI）也需要启动一个单独的线程来从主机环境中收集用户界面事件&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://8bun.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://8bun.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://8bun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JQuery相关事宜</title>
    <link href="https://8bun.github.io/2019/04/28/JQuery%E7%9B%B8%E5%85%B3%E4%BA%8B%E5%AE%9C/"/>
    <id>https://8bun.github.io/2019/04/28/JQuery相关事宜/</id>
    <published>2019-04-28T12:16:40.000Z</published>
    <updated>2019-04-28T12:28:34.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入-jQuery-的原因"><a href="#引入-jQuery-的原因" class="headerlink" title="引入 jQuery 的原因"></a>引入 jQuery 的原因</h3><p>在用 js 写代码时，会遇到一些问题：</p><ul><li>window.onload 事件有事件覆盖的问题，因此只能写一个事件。</li><li>代码容错性差。</li><li>浏览器兼容性问题。</li><li>书写很繁琐，代码量多。</li><li>代码很乱，各个页面到处都是。</li><li>动画效果很难实现。</li></ul><p>如下图所示：</p><a id="more"></a><p><a href="https://camo.githubusercontent.com/9cfe2e165ed0d3b17b189f6e2983f0cb416c180d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313731302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/9cfe2e165ed0d3b17b189f6e2983f0cb416c180d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313731302e706e67" alt="img"></a></p><p>jQuery的出现，可以解决以上问题。</p><h3 id="什么是-jQuery"><a href="#什么是-jQuery" class="headerlink" title="什么是 jQuery"></a>什么是 jQuery</h3><p>jQuery 是 js 的一个库，封装了我们开发过程中常用的一些功能，方便我们调用，提高开发效率。</p><p>js库是把我们常用的功能放到一个单独的文件中，我们用的时候，直接引用到页面里即可。</p><p>以下是jQuery的相关信息：</p><ul><li>官网：<a href="http://jquery.com/" rel="external nofollow noopener noreferrer" target="_blank">http://jquery.com/</a></li><li>官网API文档：<a href="http://api.jquery.com/" rel="external nofollow noopener noreferrer" target="_blank">http://api.jquery.com/</a></li><li>中文汉化API文档：<a href="http://www.css88.com/jqapi-1.9/" rel="external nofollow noopener noreferrer" target="_blank">http://www.css88.com/jqapi-1.9/</a></li></ul><h3 id="学习jQuery，主要是学什么"><a href="#学习jQuery，主要是学什么" class="headerlink" title="学习jQuery，主要是学什么"></a>学习jQuery，主要是学什么</h3><p>初期，主要学习如何使用jQuery操作DOM，其实就是学习jQuery封装好的那些API。</p><p>这些API的共同特点是：几乎全都是方法。所以，在使用jQuery的API时，都是方法调用，也就是说要加小括号()，小括号里面是相应的参数，参数不同，功能不同。</p><h3 id="jQuery初体验"><a href="#jQuery初体验" class="headerlink" title="jQuery初体验"></a>jQuery初体验</h3><p>现在用原生 js 来写下面这一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            margin: 10px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//原生js</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> divArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divArr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    divArr[i].style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="javascript">                    divArr[i].innerHTML = <span class="string">"生命壹号"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示五个div盒子和设置内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果用 jQuery 来写，保持其他的代码不变，<code>&lt;script&gt;</code>部分的代码修改为：（需要提前引入 ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//jquery版</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jQbtn = $(<span class="string">"button"</span>);<span class="comment">//根据标签名获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jQdiv = $(<span class="string">"div"</span>);<span class="comment">//根据标签名获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="javascript">        jQbtn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            jQdiv.show(<span class="number">1000</span>);<span class="comment">//显示盒子。</span></span></span><br><span class="line"><span class="javascript">            jQdiv.html(<span class="string">"tomorrow！"</span>);<span class="comment">//设置内容</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//上面的两行可以写成链式编程：jQdiv.show(3000).html(1111);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        &#125;);<span class="comment">//事件是通过方法绑定的。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-的两大特点"><a href="#jQuery-的两大特点" class="headerlink" title="jQuery 的两大特点"></a>jQuery 的两大特点</h3><p>（1）<strong>链式编程</strong>：比如<code>.show()</code>和<code>.html()</code>可以连写成<code>.show().html()</code>。</p><p>链式编程原理：return this。</p><p>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。</p><p>（2）<strong>隐式迭代</strong>：隐式 对应的是 显式。隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。</p><p>如果获取的是多元素的值，大部分情况下返回的是第一个元素的值。</p><h2 id="jQuery-的使用"><a href="#jQuery-的使用" class="headerlink" title="jQuery 的使用"></a>jQuery 的使用</h2><h3 id="使用-jQuery-的基本步骤"><a href="#使用-jQuery-的基本步骤" class="headerlink" title="使用 jQuery 的基本步骤"></a>使用 jQuery 的基本步骤</h3><p>（1）引包</p><p>（2）入口函数</p><p>（3）功能实现代码（事件处理）</p><p>如下图所示：</p><p><a href="https://camo.githubusercontent.com/d9a0d01014302e787378996e1e5bc34999d259ef/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313934302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/d9a0d01014302e787378996e1e5bc34999d259ef/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313934302e706e67" alt="img"></a></p><p>主要，导包的代码一定要放在js代码的最上面。</p><h3 id="jQuery-的版本"><a href="#jQuery-的版本" class="headerlink" title="jQuery 的版本"></a>jQuery 的版本</h3><p>jQuery 有两个大版本：</p><ul><li>1.x版本：最新版为 v1.11.3。</li><li>2.x版本：最新版为 v2.1.4（不再支持IE6、7、8）。</li><li>3.x版本。</li></ul><p>PS：开发版本一般用1.10以上。</p><p>我们以 v1.11.1版本为例，下载下来后发现，里面有两个文件：</p><p><a href="https://camo.githubusercontent.com/6f18e81f3de9dd85791ba416af728e2e3e077b4d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313935302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/6f18e81f3de9dd85791ba416af728e2e3e077b4d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313935302e706e67" alt="img"></a></p><p>它们的区别是：</p><ul><li>第一个是未压缩版，第二个是压缩版。</li><li>平时开发过程中，可以使用任意一个版本；但是，项目上线的时候，推荐使用压缩版。</li></ul><h2 id="jQuery-的入口函数和-符号"><a href="#jQuery-的入口函数和-符号" class="headerlink" title="jQuery 的入口函数和 `##  符号"></a>jQuery 的入口函数和 `##  符号</h2><h3 id="入口函数（重要）"><a href="#入口函数（重要）" class="headerlink" title="入口函数（重要）"></a>入口函数（重要）</h3><p>原生 js 的入口函数指的是：<code>window.onload = function() {};</code> 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//原生 js 的入口函数。页面上所有内容加载完毕，才执行。</span></span><br><span class="line"> <span class="comment">//不仅要等文本加载完毕，而且要等图片也要加载完毕，才执行函数。</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 jQuery的入口函数，有以下几种写法：</p><p>写法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>写法二：（写法一的简洁版）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法三：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.文档加载完毕，图片也加载完毕的时候，在执行这个函数。</span></span><br><span class="line">$(<span class="built_in">window</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>jQuery入口函数与js入口函数的区别</strong>：</p><p>区别一：书写个数不同：</p><ul><li>Js 的入口函数只能出现一次，出现多次会存在事件覆盖的问题。</li><li>jQuery 的入口函数，可以出现任意多次，并不存在事件覆盖问题。</li></ul><p>区别二：执行时机不同：</p><ul><li>Js的入口函数是在<strong>所有的文件资源加载</strong>完成后，才执行。这些<strong>文件资源</strong>包括：页面文档、外部的js文件、外部的css文件、图片等。</li><li>jQuery的入口函数，是在文档加载完成后，就执行。文档加载完成指的是：DOM树加载完成后，就可以操作DOM了，不用等到所有的<strong>外部资源</strong>都加载完成。</li></ul><p>文档加载的顺序：从上往下，边解析边执行。</p><h3 id="jQuery的-符号"><a href="#jQuery的-符号" class="headerlink" title="jQuery的`### 符号"></a>jQuery的`### 符号</h3><p>jQuery 使用 <code>$</code> 符号原因：书写简洁、相对于其他字符与众不同、容易被记住。</p><p>jQuery占用了我们两个变量：<code>$</code> 和 jQuery。当我们在代码中打印它们俩的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery-1.11.1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log($);</span><br><span class="line">    <span class="built_in">console</span>.log(jQuery);</span><br><span class="line">    <span class="built_in">console</span>.log($===jQuery);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>打印结果如下：</p><p><a href="https://camo.githubusercontent.com/000e17359bf05c7eb736aa08ebd55f0da95346a5/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323031342e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/000e17359bf05c7eb736aa08ebd55f0da95346a5/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323031342e706e67" alt="img"></a></p><p>从打印结果可以看出，$ 代表的就是 jQuery。</p><p>那怎么理解jQuery里面的 <code>$</code> 符号呢？</p><p><strong>$ 实际上表示的是一个函数名</strong> 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(); <span class="comment">// 调用上面我们自定义的函数$</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>）.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// 调用入口函数</span></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// 调用入口函数</span></span><br><span class="line"></span><br><span class="line">$(“#btnShow”) // 获取id属性为btnShow的元素</span><br><span class="line"></span><br><span class="line">$(“div”) <span class="comment">// 获取所有的div标签元素</span></span><br></pre></td></tr></table></figure><p>如上方所示，jQuery 里面的 <code>$</code> 函数，根据传入参数的不同，进行不同的调用，实现不同的功能。返回的是jQuery对象。</p><p>jQuery这个js库，除了<code>$</code> 之外，还提供了另外一个函数：jQuery。jQuery函数跟 <script type="math/tex">` 函数的关系：`jQuery ===</script>。</p><h2 id="js中的DOM对象-和-jQuery对象-比较（重点，难点）"><a href="#js中的DOM对象-和-jQuery对象-比较（重点，难点）" class="headerlink" title="js中的DOM对象 和 jQuery对象 比较（重点，难点）"></a>js中的DOM对象 和 jQuery对象 比较（重点，难点）</h2><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p>通过 jQuery 获取的元素是一个<strong>数组</strong>，数组中包含着原生JS中的DOM对象。举例：</p><p>针对下面这样一个div结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过原生 js 获取这些元素节点的方式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);           <span class="comment">//通过 id 获取单个元素</span></span><br><span class="line"><span class="keyword">var</span> boxArr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>);  <span class="comment">//通过 class 获取的是数组</span></span><br><span class="line"><span class="keyword">var</span> divArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);    <span class="comment">//通过标签获取的是数组</span></span><br></pre></td></tr></table></figure><p>通过 jQuery 获取这些元素节点的方式是：（获取的都是数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取的是数组，里面包含着原生 JS 中的DOM对象。</span></span><br><span class="line"><span class="keyword">var</span> jqBox1 = $(<span class="string">"#box"</span>);</span><br><span class="line"><span class="keyword">var</span> jqBox2 = $(<span class="string">".box"</span>);</span><br><span class="line"><span class="keyword">var</span> jqBox3 = $(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><p>我们打印出来看看：</p><p><a href="https://camo.githubusercontent.com/9f28725828ffab3d384a7dcc10aafdd55eb5ce1b/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323034352e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/9f28725828ffab3d384a7dcc10aafdd55eb5ce1b/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323034352e706e67" alt="img"></a></p><p>上图显示，由于JQuery 自带了 css()方法，我们还可以直接在代码中给 div 设置 css 属性。</p><p><strong>总结</strong>：jQuery 就是把 DOM 对象重新包装了一下，让其具有了 jQuery 方法。</p><h3 id="二者的相互转换"><a href="#二者的相互转换" class="headerlink" title="二者的相互转换"></a>二者的相互转换</h3><p><strong>1、 DOM 对象 转为 jQuery对象</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(js对象);</span><br></pre></td></tr></table></figure><p>举例：（拿上一段的代码举例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换。</span></span><br><span class="line">jqBox1 = $(myBox);</span><br><span class="line">jqBox2 = $(boxArr);</span><br><span class="line">jqBox3 = $(divArr);</span><br></pre></td></tr></table></figure><p>DOM 对象转换成了 jquery 对象之后，上面的功能可以直接调用。</p><p><strong>2、jQuery对象 转为 DOM 对象</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jquery对象[index];      <span class="comment">//方式1（推荐）</span></span><br><span class="line"></span><br><span class="line">jquery对象.get(index);  <span class="comment">//方式2</span></span><br></pre></td></tr></table></figure><p>jQuery对象转换成了 DOM 对象之后，可以直接调用 DOM 提供的一些功能。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jquery对象转换成 DOM 对象之后</span></span><br><span class="line">jqBox3[<span class="number">0</span>].style.backgroundColor = <span class="string">"black"</span>;</span><br><span class="line">jqBox3.get(<span class="number">4</span>).style.backgroundColor = <span class="string">"pink"</span>;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：如果想要用哪种方式设置属性或方法，必须转换成该类型。</p><h3 id="举例：隔行变色"><a href="#举例：隔行变色" class="headerlink" title="举例：隔行变色"></a>举例：隔行变色</h3><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//入口函数</span></span></span><br><span class="line"><span class="javascript">        jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqLi = $(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jqLi.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//jquery对象，转换成了js对象</span></span></span><br><span class="line"><span class="javascript">                    jqLi[i].style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    jqLi[i].style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://camo.githubusercontent.com/750e06fca4c31bb3942b91999e8def30943d05c5/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323131312e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/750e06fca4c31bb3942b91999e8def30943d05c5/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323131312e706e67" alt="img"></a></p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>我们以前在CSS中学习的选择器有：</p><p><a href="https://camo.githubusercontent.com/42dcbe728e174eb494d28a2cead0b83e92edba91/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132322e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/42dcbe728e174eb494d28a2cead0b83e92edba91/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132322e706e67" alt="img"></a></p><p>今天来学习一下jQuery 选择器。</p><p>jQuery选择器是jQuery强大的体现，它提供了一组方法，让我们更加方便的获取到页面中的元素。</p><h3 id="1、jQuery-的基本选择器"><a href="#1、jQuery-的基本选择器" class="headerlink" title="1、jQuery 的基本选择器"></a>1、jQuery 的基本选择器</h3><p><a href="https://camo.githubusercontent.com/74b72ddbd5cf84e0cc99111d27d43b465b05189f/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132352e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/74b72ddbd5cf84e0cc99111d27d43b465b05189f/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132352e706e67" alt="img"></a></p><p>解释如下：</p><p><a href="https://camo.githubusercontent.com/d1128c84f64ea3b9e1f74a3a49602e13b1b26c5e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132362e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/d1128c84f64ea3b9e1f74a3a49602e13b1b26c5e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323132362e706e67" alt="img"></a></p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//入口函数</span></span></span><br><span class="line"><span class="javascript">        jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//三种方式获取jquery对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqBox1 = $(<span class="string">"#box"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqBox2 = $(<span class="string">".box"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqBox3 = $(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//操作标签选择器</span></span></span><br><span class="line"><span class="javascript">            jqBox3.css(<span class="string">"width"</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">            jqBox3.css(<span class="string">"height"</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">            jqBox3.css(<span class="string">"margin"</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">            jqBox3.css(<span class="string">"background"</span>, <span class="string">"pink"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//操作类选择器(隐式迭代，不用一个一个设置)</span></span></span><br><span class="line"><span class="javascript">            jqBox2.css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//操作id选择器</span></span></span><br><span class="line"><span class="javascript">            jqBox1.css(<span class="string">"background"</span>, <span class="string">"yellow"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://camo.githubusercontent.com/fbae2849c197e7d3ca2731a5e9debb7af1495832/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133332e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/fbae2849c197e7d3ca2731a5e9debb7af1495832/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133332e706e67" alt="img"></a></p><h3 id="2、层级选择器"><a href="#2、层级选择器" class="headerlink" title="2、层级选择器"></a>2、层级选择器</h3><p><a href="https://camo.githubusercontent.com/b16bed86b170accfa3687eff1a7b346f619a7a91/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133382e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/b16bed86b170accfa3687eff1a7b346f619a7a91/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133382e706e67" alt="img"></a></p><p>解释如下：</p><p><a href="https://camo.githubusercontent.com/f5f07a04183d063071a3197b67e7107eb63d4db8/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133392e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/f5f07a04183d063071a3197b67e7107eb63d4db8/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323133392e706e67" alt="img"></a></p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取ul中的li设置为粉色</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//后代：儿孙重孙曾孙玄孙....</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqLi = $(<span class="string">"ul li"</span>);</span></span><br><span class="line"><span class="javascript">            jqLi.css(<span class="string">"margin"</span>, <span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">            jqLi.css(<span class="string">"background"</span>, <span class="string">"pink"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//子代：亲儿子</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqOtherLi = $(<span class="string">"ul&gt;li"</span>);</span></span><br><span class="line"><span class="javascript">            jqOtherLi.css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://camo.githubusercontent.com/11523f8d1d3af0ca4cbf86adccaf0b5ba1faa3ca/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323134352e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/11523f8d1d3af0ca4cbf86adccaf0b5ba1faa3ca/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323134352e706e67" alt="img"></a></p><h3 id="3、基本过滤选择器"><a href="#3、基本过滤选择器" class="headerlink" title="3、基本过滤选择器"></a>3、基本过滤选择器</h3><p><a href="https://camo.githubusercontent.com/97f49c3cb2117ab279cddcd9921f469f1156de41/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/97f49c3cb2117ab279cddcd9921f469f1156de41/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135302e706e67" alt="img"></a></p><p>解释：</p><p><a href="https://camo.githubusercontent.com/99a772e96e0aaa99b517991fbd89cdf96cbac4ae/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135312e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/99a772e96e0aaa99b517991fbd89cdf96cbac4ae/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135312e706e67" alt="img"></a></p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery-1.11.1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :odd</span></span><br><span class="line">        $(<span class="string">"li:odd"</span>).css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :even</span></span><br><span class="line">        $(<span class="string">"li:even"</span>).css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :eq(index)</span></span><br><span class="line">        $(<span class="string">"ul li:eq(3)"</span>).css(<span class="string">"font-size"</span>, <span class="string">"30px"</span>);  <span class="comment">//设置第四个li的字体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// :lt(index)</span></span><br><span class="line">        $(<span class="string">"li:lt(6)"</span>).css(<span class="string">"font-size"</span>, <span class="string">"30px"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :gt(index)</span></span><br><span class="line">        $(<span class="string">".ulList1 li:gt(7)"</span>).css(<span class="string">"font-size"</span>, <span class="string">"40px"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :first</span></span><br><span class="line">        $(<span class="string">".ulList li:first"</span>).css(<span class="string">"font-size"</span>, <span class="string">"40px"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// :last</span></span><br><span class="line">        $(<span class="string">"li:last"</span>).css(<span class="string">"font-size"</span>, <span class="string">"40px"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、属性选择器"><a href="#4、属性选择器" class="headerlink" title="4、属性选择器"></a>4、属性选择器</h3><p><a href="https://camo.githubusercontent.com/5719ef4f0d667cf15e53da344bbc452d1b59bf6a/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135352e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/5719ef4f0d667cf15e53da344bbc452d1b59bf6a/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323135352e706e67" alt="img"></a></p><h3 id="5、筛选选择器"><a href="#5、筛选选择器" class="headerlink" title="5、筛选选择器"></a>5、筛选选择器</h3><p><a href="https://camo.githubusercontent.com/ed4051fac4bd0489908ce98f6d453d188db88710/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323230302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/ed4051fac4bd0489908ce98f6d453d188db88710/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323230302e706e67" alt="img"></a></p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqul = $(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//find(selector); 从jquery对象的后代中查找</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//必须制定参数，如果不指定获取不到元素。length === 0</span></span></span><br><span class="line"><span class="javascript">            jqul.find(<span class="string">"li"</span>).css(<span class="string">"background"</span>, <span class="string">"pink"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(jqul.find());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//chidlren(selector); 从jquery对象的子代中查找</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//不写参数代表获取所有子元素。</span></span></span><br><span class="line"><span class="javascript">            jqul.children(<span class="string">"li"</span>).css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//eq(索引值); 从jquery对象的子代中查找该索引值的元素</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//要写该数组中的第几个。</span></span></span><br><span class="line"><span class="javascript">            jqul.children().eq(<span class="number">0</span>).css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//next(); 该元素的下一个兄弟元素</span></span></span><br><span class="line"><span class="javascript">            jqul.children().eq(<span class="number">0</span>).next().css(<span class="string">"background"</span>, <span class="string">"yellow"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//siblings(selector); 该元素的所有兄弟元素</span></span></span><br><span class="line"><span class="javascript">            jqul.children().eq(<span class="number">0</span>).next().siblings().css(<span class="string">"border"</span>, <span class="string">"1px solid blue"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//parent(); 该元素的父元素（和定位没有关系）</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(jqul.children().eq(<span class="number">0</span>).parent());</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol中的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol中的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol中的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol中的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://camo.githubusercontent.com/1aadf5981ab75f59c83078a569d00d6052d43155/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323230332e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/1aadf5981ab75f59c83078a569d00d6052d43155/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f323230332e706e67" alt="img"></a></p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="举例1：鼠标悬停时，弹出下拉菜单【重要】"><a href="#举例1：鼠标悬停时，弹出下拉菜单【重要】" class="headerlink" title="举例1：鼠标悬停时，弹出下拉菜单【重要】"></a>举例1：鼠标悬停时，弹出下拉菜单【重要】</h3><p>完整版代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ul &#123;</span></span><br><span class="line"><span class="undefined">            list-style: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap &#123;</span></span><br><span class="line"><span class="undefined">            width: 330px;</span></span><br><span class="line"><span class="undefined">            height: 30px;</span></span><br><span class="line"><span class="undefined">            margin: 100px auto 0;</span></span><br><span class="line"><span class="undefined">            padding-left: 10px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap li &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellowgreen;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap &gt; ul &gt; li &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-right: 10px;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap a &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            height: 30px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">            color: #000;</span></span><br><span class="line"><span class="undefined">            line-height: 30px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap li ul &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 30px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//入口函数</span></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//需求：鼠标放入一级li中，让他里面的ul显示。移开隐藏。</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqli = $(<span class="string">".wrap&gt;ul&gt;li"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="javascript">            jqli.mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//这个位置用到了this.</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(this);  //打印结果是js中的dom对象。注意：jquery对象绑定的事件中，this指js中的dom对象。【重要】</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//让this中的ul显示出来。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                原生 js 的做法是：this.children[1].style.display = "block";</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//把js的dom对象包装为jquery对象，然后用jquery方法操作</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).show();</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定事件：鼠标移开时，隐藏下拉菜单</span></span></span><br><span class="line"><span class="javascript">            jqli.mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).hide();</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>一级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>一级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>一级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方代码中，我们可以看到，用 jQuery来操作，是非常方便的。</p><p>实现效果如下：</p><p><a href="https://camo.githubusercontent.com/44a56b4049daab15d7f5d11169e9c3c0c001ff2f/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313033302e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/44a56b4049daab15d7f5d11169e9c3c0c001ff2f/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313033302e676966" alt="img"></a></p><p><strong>this的用法：</strong></p><p>上方代码中，核心的一行代码是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).show();</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).hide();</span><br></pre></td></tr></table></figure><p>如果我把这行代码中的this直接写成 DOM对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jqli.children(<span class="string">"ul"</span>).show();</span><br><span class="line"></span><br><span class="line">jqli.children(<span class="string">"ul"</span>).hide();</span><br></pre></td></tr></table></figure><p>产生的结果是：（不是我们期望的结果）</p><p><a href="https://camo.githubusercontent.com/9dbb44808d57f425abfe12a38b17ffb589b8622d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313035302e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/9dbb44808d57f425abfe12a38b17ffb589b8622d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313035302e676966" alt="img"></a></p><p>两张图的对比，可以看出this的作用：谁正在调用函数，this就指的是谁。</p><h3 id="举例2：鼠标悬停时变色"><a href="#举例2：鼠标悬停时变色" class="headerlink" title="举例2：鼠标悬停时变色"></a>举例2：鼠标悬停时变色</h3><p>完整版代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//需求；隔行变色；鼠标悬停时，还要变色。</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqli1 = $(<span class="string">"li:odd"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jqli2 = $(<span class="string">"li:even"</span>);</span></span><br><span class="line"><span class="javascript">            jqli1.css(<span class="string">"background"</span>, <span class="string">"#cccccc"</span>);</span></span><br><span class="line"><span class="javascript">            jqli2.css(<span class="string">"background"</span>, <span class="string">"white"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//鼠标悬停时变色</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> color = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                color = $(<span class="keyword">this</span>).css(<span class="string">"background"</span>);  <span class="comment">//先把之前的颜色保存下来，鼠标离开时还原</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//鼠标离开时，恢复为原来的颜色</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"li"</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, color);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://camo.githubusercontent.com/71372ca0dd741e6b5805ea49dc6b315ac86885ec/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313130302e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/71372ca0dd741e6b5805ea49dc6b315ac86885ec/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313130302e676966" alt="img"></a></p><h3 id="举例3：突出显示"><a href="#举例3：突出显示" class="headerlink" title="举例3：突出显示"></a>举例3：突出显示</h3><p>要求：鼠标悬停时，突出显示这个li，让其他的li都半透明。</p><p>用 jQuery的选择起来实现，会发现非常方便。</p><p>完整版代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ul &#123;</span></span><br><span class="line"><span class="undefined">            list-style: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            background: #000;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap &#123;</span></span><br><span class="line"><span class="undefined">            margin: 100px auto 0;</span></span><br><span class="line"><span class="undefined">            width: 630px;</span></span><br><span class="line"><span class="undefined">            height: 394px;</span></span><br><span class="line"><span class="undefined">            padding: 10px 0 0 10px;</span></span><br><span class="line"><span class="undefined">            background: #000;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">            border: 1px solid #fff;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap li &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin: 0 10px 10px 0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrap img &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            border: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        jQuery(<span class="built_in">window</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//需求：鼠标放入li中，其他的li半透明，当前盒子的opacity值为1</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">".wrap"</span>).find(<span class="string">"li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//链式编程</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>).siblings(<span class="string">"li"</span>).css(<span class="string">"opacity"</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//离开wrap的时候所有的li的全部opacity值为1；</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">".wrap"</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).children().children(<span class="string">"li"</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//                $(".wrap li").css("opacity",1);</span></span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/04.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/05.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现的效果：</p><p><a href="https://camo.githubusercontent.com/3e12517806bd9b49d6004b3e6a0da4dbdb998789/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313131385f322e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/3e12517806bd9b49d6004b3e6a0da4dbdb998789/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313131385f322e676966" alt="img"></a></p><p>注意这里的css布局里，每一个图片都用一个li来存放。设置li的父亲的宽度之后，然后将li设置为浮动，即可自适应地排列成两排。</p><p>工程文件：</p><ul><li><a href="https://github.com/8bun/Web/blob/master/06-jQuery" rel="external nofollow noopener noreferrer" target="_blank">2018-02-05-突出显示.rar</a></li></ul><h3 id="举例4：手风琴效果"><a href="#举例4：手风琴效果" class="headerlink" title="举例4：手风琴效果"></a>举例4：手风琴效果</h3><p>完整版代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;padding: 0;margin: 0;&#125;</span></span><br><span class="line"><span class="undefined">        ul &#123; list-style-type: none;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .parentWrap &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            text-align:center;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .menuGroup &#123;</span></span><br><span class="line"><span class="undefined">            border:1px solid #999;</span></span><br><span class="line"><span class="undefined">            background-color:#e0ecff;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .groupTitle &#123;</span></span><br><span class="line"><span class="undefined">            display:block;</span></span><br><span class="line"><span class="undefined">            height:20px;</span></span><br><span class="line"><span class="undefined">            line-height:20px;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            border-bottom:1px solid #ccc;</span></span><br><span class="line"><span class="undefined">            cursor:pointer;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .menuGroup &gt; div &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color:#fff;</span></span><br><span class="line"><span class="undefined">            display:none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//需求：鼠标点击span，让他下面的div显示出来。让其他的div隐藏。</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">".parentWrap span"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//                $(this).next().show();</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                //让其他的隐藏</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                //点击的span的父亲li，的所有的兄弟元素li，的孩子元素div全部隐藏。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                $(this).parent("li").siblings("li").children("div").hide();</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//连式编程</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).next().show().parent(<span class="string">"li"</span>).siblings(<span class="string">"li"</span>).find(<span class="string">"div"</span>).hide();</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"parentWrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menuGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"groupTitle"</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是弹出来的div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menuGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"groupTitle"</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是弹出来的div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menuGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"groupTitle"</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是弹出来的div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menuGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"groupTitle"</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是弹出来的div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://camo.githubusercontent.com/e2b21d790cd9382242d5599f43a36fc3be0d9888/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313132302e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/e2b21d790cd9382242d5599f43a36fc3be0d9888/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313132302e676966" alt="img"></a></p><p>注意这里的 选择器的用法：parent、next</p><h3 id="举例5：淘宝精品服饰广告"><a href="#举例5：淘宝精品服饰广告" class="headerlink" title="举例5：淘宝精品服饰广告"></a>举例5：淘宝精品服饰广告</h3><p>完整版代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ul &#123;</span></span><br><span class="line"><span class="undefined">            list-style: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        a &#123;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrapper &#123;</span></span><br><span class="line"><span class="undefined">            width: 298px;</span></span><br><span class="line"><span class="undefined">            height: 248px;</span></span><br><span class="line"><span class="undefined">            margin: 100px auto 0;</span></span><br><span class="line"><span class="undefined">            border: 1px solid pink;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #left, #center, #right &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #left li, #right li &#123;</span></span><br><span class="line"><span class="undefined">            background: url(images/lili.jpg) repeat-x;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #left li a, #right li a &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 48px;</span></span><br><span class="line"><span class="undefined">            height: 27px;</span></span><br><span class="line"><span class="undefined">            border-bottom: 1px solid pink;</span></span><br><span class="line"><span class="undefined">            line-height: 27px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            color: black;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #left li a:hover, #right li a:hover &#123;</span></span><br><span class="line"><span class="undefined">            background-image: url(images/abg.gif);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #center &#123;</span></span><br><span class="line"><span class="undefined">            border-left: 1px solid pink;</span></span><br><span class="line"><span class="undefined">            border-right: 1px solid pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//需求：鼠标放入两侧的li中，让中间的ul中对应索引值的li显示出来，其他的隐藏。（右侧的li要+9）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//左侧先绑。获取绑mouseenter</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#left li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//显示对应索引值的中间的li</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//alert($(this).index());  获取索引值</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#center li"</span>).eq($(<span class="keyword">this</span>).index()).show().siblings(<span class="string">"li"</span>).hide();</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//右侧</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#right li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//显示对应索引值的中间的li</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//alert($(this).index());  获取索引值</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#center li:eq("</span> + ($(<span class="keyword">this</span>).index() + <span class="number">9</span>) + <span class="string">")"</span>).show().siblings(<span class="string">"li"</span>).hide();</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>雪地靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冬裙<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>呢大衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>羽绒服<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>牛仔裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/女靴.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/雪地靴.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/冬裙.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/呢大衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/女裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/羽绒服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/牛仔裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/女包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/男包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/登山鞋.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/皮带.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/围巾.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/皮衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/男毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/男棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/男靴.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女包<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男包<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登山鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮带<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>围巾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://camo.githubusercontent.com/969d09425c8ba9d86c793cac4a9644e0b5d4cf0a/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313133352e676966" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/969d09425c8ba9d86c793cac4a9644e0b5d4cf0a/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230355f313133352e676966" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引入-jQuery-的原因&quot;&gt;&lt;a href=&quot;#引入-jQuery-的原因&quot; class=&quot;headerlink&quot; title=&quot;引入 jQuery 的原因&quot;&gt;&lt;/a&gt;引入 jQuery 的原因&lt;/h3&gt;&lt;p&gt;在用 js 写代码时，会遇到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.onload 事件有事件覆盖的问题，因此只能写一个事件。&lt;/li&gt;
&lt;li&gt;代码容错性差。&lt;/li&gt;
&lt;li&gt;浏览器兼容性问题。&lt;/li&gt;
&lt;li&gt;书写很繁琐，代码量多。&lt;/li&gt;
&lt;li&gt;代码很乱，各个页面到处都是。&lt;/li&gt;
&lt;li&gt;动画效果很难实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://8bun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JQuery" scheme="https://8bun.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>KNN And K-means Algorithm</title>
    <link href="https://8bun.github.io/2019/04/22/KNN-And-K-means-Algorithm/"/>
    <id>https://8bun.github.io/2019/04/22/KNN-And-K-means-Algorithm/</id>
    <published>2019-04-22T07:46:11.000Z</published>
    <updated>2019-04-23T14:13:58.767Z</updated>
    
    <content type="html"><![CDATA[<p><strong>K-means方法是一种非监督学习的算法，它解决的是聚类问题。</strong></p><p>1、算法简介：K-means方法是聚类中的经典算法，数据挖掘十大经典算法之一；算法接受参数k,然后将事先输入的n个数据对象划分为k个聚类以便使得所获得的聚类满足聚类中的对象相似度较高，而不同聚类中的对象相似度较小。</p><p>2、算法思想：以空间中k个点为中心进行聚类，对最靠近他们的对象归类，通过迭代的方法，逐次更新各聚类中心的值，直到得到最好的聚类结果。</p><p>3、算法描述：</p><a id="more"></a><p>（1）适当选择c个类的初始中心；<br>（2）在第k次迭代中，对任意一个样本，求其到c各中心的距离，将该样本归到距离最短的那个中心所在的类；<br>（3）利用均值等方法更新该类的中心值；<br>（4）对于所有的C个聚类中心，如果利用（2）（3）的迭代法更新后，值保持不变，则迭代结束；否则继续迭代。</p><p>4、算法举例：</p><p>我们假设药物A、B、C、D有两个特征值，分别是药物重量以及PH值。</p><div class="table-container"><table><thead><tr><th>药物名称</th><th>药物重量</th><th>药物PH值</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td></tr><tr><td>B</td><td>2</td><td>1</td></tr><tr><td>C</td><td>4</td><td>3</td></tr><tr><td>D</td><td>5</td><td>4</td></tr></tbody></table></div><p>现在我们要对这四个药物进行聚类，已知我们要分成两类，那么我们该怎么做呢？</p><h5 id="首先我们把上面的数据画到二位坐标系当中-A-1-1-B-2-1-C-4-3-D-5-4"><a href="#首先我们把上面的数据画到二位坐标系当中-A-1-1-B-2-1-C-4-3-D-5-4" class="headerlink" title="首先我们把上面的数据画到二位坐标系当中     A(1,1),B(2,1),C(4,3),D(5,4):"></a>首先我们把上面的数据画到二位坐标系当中     A(1,1),B(2,1),C(4,3),D(5,4):</h5><p><img src="https://img-blog.csdn.net/20170213162451415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzU1MTIyNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="è¿éåå¾çæè¿°"></p><h5 id="初始时，由于假设K-2-表示将所有数据集分为两组，我们称之为聚类-我们先假设药物A为聚类1的中心点，B为聚类2的中心点。"><a href="#初始时，由于假设K-2-表示将所有数据集分为两组，我们称之为聚类-我们先假设药物A为聚类1的中心点，B为聚类2的中心点。" class="headerlink" title="初始时，由于假设K=2 (表示将所有数据集分为两组，我们称之为聚类) 我们先假设药物A为聚类1的中心点，B为聚类2的中心点。"></a>初始时，由于假设K=2 (表示将所有数据集分为两组，我们称之为聚类) 我们先假设药物A为聚类1的中心点，B为聚类2的中心点。</h5><h5 id="那么初始时的中心坐标分别为c1-1-1-c2-2-1-c1-1-1-c2-2-1-，矩阵D的第一行代表各个点到中心点c1的距离，第二行代表各个点到中心点c2的距离；那么初始矩阵D0表示成如下："><a href="#那么初始时的中心坐标分别为c1-1-1-c2-2-1-c1-1-1-c2-2-1-，矩阵D的第一行代表各个点到中心点c1的距离，第二行代表各个点到中心点c2的距离；那么初始矩阵D0表示成如下：" class="headerlink" title="那么初始时的中心坐标分别为c1=(1,1),c2=(2,1)c1=(1,1),c2=(2,1)，矩阵D的第一行代表各个点到中心点c1的距离，第二行代表各个点到中心点c2的距离；那么初始矩阵D0表示成如下："></a>那么初始时的中心坐标分别为c1=(1,1),c2=(2,1)c1=(1,1),c2=(2,1)，矩阵D的第一行代表各个点到中心点c1的距离，第二行代表各个点到中心点c2的距离；那么初始矩阵D0表示成如下：</h5><script type="math/tex; mode=display">D0 = \left[ \begin{matrix} 0 & 1 & 3.61 & 5\\ 1 & 0 & 2.83 & 4.24 \end{matrix} \right]</script><h5 id="矩阵-D0向我们展示了除了中心点之外的其他所有点距离K个中心点的距离大小，每个点距离各个中心点的距离都不尽相同。所谓近水楼台先得月，所以将点归入离点最近的中心点一类。以后每开始一次的迭代，都会重新算出每个聚类的中心点，然后根据相同的操作进行点的归类，直到聚类中心不再进行大范围移动或者聚类次数达到要求为止。"><a href="#矩阵-D0向我们展示了除了中心点之外的其他所有点距离K个中心点的距离大小，每个点距离各个中心点的距离都不尽相同。所谓近水楼台先得月，所以将点归入离点最近的中心点一类。以后每开始一次的迭代，都会重新算出每个聚类的中心点，然后根据相同的操作进行点的归类，直到聚类中心不再进行大范围移动或者聚类次数达到要求为止。" class="headerlink" title="矩阵 D0向我们展示了除了中心点之外的其他所有点距离K个中心点的距离大小，每个点距离各个中心点的距离都不尽相同。所谓近水楼台先得月，所以将点归入离点最近的中心点一类。以后每开始一次的迭代，都会重新算出每个聚类的中心点，然后根据相同的操作进行点的归类，直到聚类中心不再进行大范围移动或者聚类次数达到要求为止。"></a>矩阵 D0向我们展示了除了中心点之外的其他所有点距离K个中心点的距离大小，每个点距离各个中心点的距离都不尽相同。所谓近水楼台先得月，所以将点归入离点最近的中心点一类。以后每开始一次的迭代，都会重新算出每个聚类的中心点，然后根据相同的操作进行点的归类，直到聚类中心不再进行大范围移动或者聚类次数达到要求为止。</h5><h5 id="矩阵G0代表样本应该归属于哪个聚类，第一行代表各个点是否属于中心c1所在的类（0代表不在，1代表在），第二行代表各个点是否属于中心c2所在的类（0代表不在，1代表在）；那么此时G0表示成如下："><a href="#矩阵G0代表样本应该归属于哪个聚类，第一行代表各个点是否属于中心c1所在的类（0代表不在，1代表在），第二行代表各个点是否属于中心c2所在的类（0代表不在，1代表在）；那么此时G0表示成如下：" class="headerlink" title="矩阵G0代表样本应该归属于哪个聚类，第一行代表各个点是否属于中心c1所在的类（0代表不在，1代表在），第二行代表各个点是否属于中心c2所在的类（0代表不在，1代表在）；那么此时G0表示成如下："></a>矩阵G0代表样本应该归属于哪个聚类，第一行代表各个点是否属于中心c1所在的类（0代表不在，1代表在），第二行代表各个点是否属于中心c2所在的类（0代表不在，1代表在）；那么此时G0表示成如下：</h5><script type="math/tex; mode=display">G0 = \left[ \begin{matrix} 1 & 0 & 0 & 0\\ 0 & 1 & 1 & 1 \end{matrix} \right]</script><h5 id="由矩阵D0可知A药物属于一个类，B、C、D属于一类；"><a href="#由矩阵D0可知A药物属于一个类，B、C、D属于一类；" class="headerlink" title="由矩阵D0可知A药物属于一个类，B、C、D属于一类；"></a>由矩阵D0可知A药物属于一个类，B、C、D属于一类；</h5><h5 id="然后，利用均值等方法更新该类的中心值。"><a href="#然后，利用均值等方法更新该类的中心值。" class="headerlink" title="然后，利用均值等方法更新该类的中心值。"></a>然后，利用均值等方法更新该类的中心值。</h5><h5 id="c1-（1-1）"><a href="#c1-（1-1）" class="headerlink" title="c1=（1,1）"></a>c1=（1,1）</h5><h5 id="c2-（-2-4-5-3-1-3-4-3）-13-3-8-3"><a href="#c2-（-2-4-5-3-1-3-4-3）-13-3-8-3" class="headerlink" title="c2=（(2+4+5)/3,(1+3+4)/3）= (13/3,8/3)"></a>c2=（(2+4+5)/3,(1+3+4)/3）= (13/3,8/3)</h5><p><img src="https://img-blog.csdn.net/20170213174603041?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzU1MTIyNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="è¿éåå¾çæè¿°"></p><h5 id="上图是更新后的坐标图，对应的中心点也发生了变化。"><a href="#上图是更新后的坐标图，对应的中心点也发生了变化。" class="headerlink" title="上图是更新后的坐标图，对应的中心点也发生了变化。"></a>上图是更新后的坐标图，对应的中心点也发生了变化。</h5><h5 id="因为中心点跟上次不一样了，所以我们又可以对样本点进行重新划分。划分的方法还是跟以前一模一样，我们先计算出矩阵D1表示成如下："><a href="#因为中心点跟上次不一样了，所以我们又可以对样本点进行重新划分。划分的方法还是跟以前一模一样，我们先计算出矩阵D1表示成如下：" class="headerlink" title="因为中心点跟上次不一样了，所以我们又可以对样本点进行重新划分。划分的方法还是跟以前一模一样，我们先计算出矩阵D1表示成如下："></a>因为中心点跟上次不一样了，所以我们又可以对样本点进行重新划分。划分的方法还是跟以前一模一样，我们先计算出矩阵D1表示成如下：</h5><script type="math/tex; mode=display">D1 = \left[ \begin{matrix} 0 & 1 & 3.61 & 5\\ 3.14 & 2.36 & 0.47 & 1.89 \end{matrix} \right]</script><h5 id="此时G1表示成如下："><a href="#此时G1表示成如下：" class="headerlink" title="此时G1表示成如下："></a>此时G1表示成如下：</h5><script type="math/tex; mode=display">G1 = \left[ \begin{matrix} 1 & 1 & 0 & 0\\ 0 & 0 & 1 & 1     \end{matrix} \right]</script><h5 id="由矩阵G1可知A、B药物属于一个类，C、D属于一类；"><a href="#由矩阵G1可知A、B药物属于一个类，C、D属于一类；" class="headerlink" title="由矩阵G1可知A、B药物属于一个类，C、D属于一类；"></a>由矩阵G1可知A、B药物属于一个类，C、D属于一类；</h5><h5 id="然后，利用均值等方法再次更新该类的中心值。"><a href="#然后，利用均值等方法再次更新该类的中心值。" class="headerlink" title="然后，利用均值等方法再次更新该类的中心值。"></a>然后，利用均值等方法再次更新该类的中心值。</h5><h5 id="c1-（-1-2-2-1-1-2）-1-5-1"><a href="#c1-（-1-2-2-1-1-2）-1-5-1" class="headerlink" title="c1=（(1+2)/2,(1+1)/2）=(1.5,1)"></a>c1=（(1+2)/2,(1+1)/2）=(1.5,1)</h5><h5 id="c2-（-4-5-2-3-4-2）-4-5-3-5"><a href="#c2-（-4-5-2-3-4-2）-4-5-3-5" class="headerlink" title="c2=（(4+5)/2,(3+4)/2）=(4.5,3.5)"></a>c2=（(4+5)/2,(3+4)/2）=(4.5,3.5)</h5><p><img src="https://img-blog.csdn.net/20170213175650062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzU1MTIyNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="è¿éåå¾çæè¿°"></p><p>上图是更新后的坐标图，对应的中心点也发生了变化。</p><p>因为中心点跟上次不一样了，所以我们又可以对样本点进行重新划分。划分的方法还是跟以前一模一样，我们先计算出矩阵D2表示成如下： </p><script type="math/tex; mode=display">D2 = \left[ \begin{matrix} 0.5 & 0.5 & 3.20 & 4.61\\ 4.30 & 3.54 & 0.71 & 0.71 \end{matrix} \right]</script><p>此时G2表示成如下： </p><script type="math/tex; mode=display">G2 = \left[ \begin{matrix} 1 & 1 & 0 & 0\\ 0 & 0 & 1 & 1 \end{matrix} \right]</script><h5 id="由矩阵G2可知A、B药物属于一个类，C、D属于一类；"><a href="#由矩阵G2可知A、B药物属于一个类，C、D属于一类；" class="headerlink" title="由矩阵G2可知A、B药物属于一个类，C、D属于一类；"></a>由矩阵G2可知A、B药物属于一个类，C、D属于一类；</h5><h5 id="然后，利用均值等方法再次更新该类的中心值。-1"><a href="#然后，利用均值等方法再次更新该类的中心值。-1" class="headerlink" title="然后，利用均值等方法再次更新该类的中心值。"></a>然后，利用均值等方法再次更新该类的中心值。</h5><h5 id="c1-（-1-2-2-1-1-2）-1-5-1-1"><a href="#c1-（-1-2-2-1-1-2）-1-5-1-1" class="headerlink" title="c1=（(1+2)/2,(1+1)/2）=(1.5,1)"></a>c1=（(1+2)/2,(1+1)/2）=(1.5,1)</h5><h5 id="c2-（-4-5-2-3-4-2）-4-5-3-5-1"><a href="#c2-（-4-5-2-3-4-2）-4-5-3-5-1" class="headerlink" title="c2=（(4+5)/2,(3+4)/2）=(4.5,3.5)"></a>c2=（(4+5)/2,(3+4)/2）=(4.5,3.5)</h5><h5 id="因为对应的中心点并没有发生变化，所以迭代停止，计算完毕。"><a href="#因为对应的中心点并没有发生变化，所以迭代停止，计算完毕。" class="headerlink" title="因为对应的中心点并没有发生变化，所以迭代停止，计算完毕。"></a>因为对应的中心点并没有发生变化，所以迭代停止，计算完毕。</h5><p><strong>本算法的时间复杂度：O(tkmn)，其中，t为迭代次数，k为簇的数目，m为记录数，n为维数；</strong></p><p><strong>空间复杂度：O((m+k)n)，其中，k为簇的数目，m为记录数，n为维数。</strong></p><p><strong>适用范围:</strong></p><h4 id="K-means算法试图找到使平凡误差准则函数最小的簇。当潜在的簇形状是凸面的，簇与簇之间区别较明显，且簇大小相近时，其聚类结果较理想。前面提到，该算法时间复杂度为O-tkmn-，与样本数量线性相关，所以，对于处理大数据集合，该算法非常高效，且伸缩性较好。但该算法除了要事先确定簇数K和对初始聚类中心敏感外，经常以局部最优结束，同时对“噪声”和孤立点敏感，并且该方法不适于发现非凸面形状的簇或大小差别很大的簇。"><a href="#K-means算法试图找到使平凡误差准则函数最小的簇。当潜在的簇形状是凸面的，簇与簇之间区别较明显，且簇大小相近时，其聚类结果较理想。前面提到，该算法时间复杂度为O-tkmn-，与样本数量线性相关，所以，对于处理大数据集合，该算法非常高效，且伸缩性较好。但该算法除了要事先确定簇数K和对初始聚类中心敏感外，经常以局部最优结束，同时对“噪声”和孤立点敏感，并且该方法不适于发现非凸面形状的簇或大小差别很大的簇。" class="headerlink" title="K-means算法试图找到使平凡误差准则函数最小的簇。当潜在的簇形状是凸面的，簇与簇之间区别较明显，且簇大小相近时，其聚类结果较理想。前面提到，该算法时间复杂度为O(tkmn)，与样本数量线性相关，所以，对于处理大数据集合，该算法非常高效，且伸缩性较好。但该算法除了要事先确定簇数K和对初始聚类中心敏感外，经常以局部最优结束，同时对“噪声”和孤立点敏感，并且该方法不适于发现非凸面形状的簇或大小差别很大的簇。"></a>K-means算法试图找到使平凡误差准则函数最小的簇。当潜在的簇形状是凸面的，簇与簇之间区别较明显，且簇大小相近时，其聚类结果较理想。前面提到，该算法时间复杂度为O(tkmn)，与样本数量线性相关，所以，对于处理大数据集合，该算法非常高效，且伸缩性较好。但该算法除了要事先确定簇数K和对初始聚类中心敏感外，经常以局部最优结束，同时对“噪声”和孤立点敏感，并且该方法不适于发现非凸面形状的簇或大小差别很大的簇。</h4><p><strong>缺点：</strong></p><h4 id="1、聚类中心的个数K-需要事先给定，但在实际中这个-K-值的选定是非常难以估计的，很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；"><a href="#1、聚类中心的个数K-需要事先给定，但在实际中这个-K-值的选定是非常难以估计的，很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；" class="headerlink" title="1、聚类中心的个数K 需要事先给定，但在实际中这个 K 值的选定是非常难以估计的，很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；"></a>1、聚类中心的个数K 需要事先给定，但在实际中这个 K 值的选定是非常难以估计的，很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；</h4><h4 id="2、K-means需要人为地确定初始聚类中心，不同的初始聚类中心可能导致完全不同的聚类结果。（可以使用K-means-算法来解决）"><a href="#2、K-means需要人为地确定初始聚类中心，不同的初始聚类中心可能导致完全不同的聚类结果。（可以使用K-means-算法来解决）" class="headerlink" title="2、K-means需要人为地确定初始聚类中心，不同的初始聚类中心可能导致完全不同的聚类结果。（可以使用K-means++算法来解决）"></a>2、K-means需要人为地确定初始聚类中心，不同的初始聚类中心可能导致完全不同的聚类结果。（可以使用K-means++算法来解决）</h4><p><strong>K-means 算法代码实现：</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K_Means</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># k是分组数；tolerance为'中心点误差'；max_iter是最大迭代次数</span></span><br><span class="line">    <span class="comment"># 类构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k=<span class="number">2</span>, tolerance=<span class="number">0.0001</span>, max_iter=<span class="number">300</span>)</span>:</span></span><br><span class="line">        self.k_ = k</span><br><span class="line">        self.tolerance_ = tolerance</span><br><span class="line">        self.max_iter_ = max_iter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.centers_ = &#123;&#125;  <span class="comment"># 中心点集合</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k_):</span><br><span class="line">            self.centers_[i] = data[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.max_iter_):</span><br><span class="line">            self.clf_ = &#123;&#125; <span class="comment"># 定义为字典，每一类都有一个名称</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k_):</span><br><span class="line">                self.clf_[i] = []  <span class="comment"># 聚类字典，根据k组数确定最大长度</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># print("此时的中心点集合: ",self.centers_)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历样本所有点</span></span><br><span class="line">            <span class="keyword">for</span> feature <span class="keyword">in</span> data:</span><br><span class="line">                <span class="comment"># distances = [np.linalg.norm(feature-self.centers[center]) for center in self.centers]</span></span><br><span class="line">                distances = []</span><br><span class="line">                <span class="comment"># 对每个样本点，遍历所有中心点，计算它与每个聚类的中心的距离，然后取最小距离进行归类</span></span><br><span class="line">                <span class="keyword">for</span> center <span class="keyword">in</span> self.centers_:</span><br><span class="line">                    <span class="comment"># 欧拉距离</span></span><br><span class="line">                    <span class="comment"># 可使用np.sqrt(np.sum((features-self.centers_[center])**2))计算距离</span></span><br><span class="line">                    <span class="comment"># norm()可以直接计算出距离</span></span><br><span class="line">                    distances.append(np.linalg.norm(feature - self.centers_[center]))</span><br><span class="line">                <span class="comment"># 在distances中取最小距离</span></span><br><span class="line">                classification = distances.index(min(distances)) <span class="comment"># 返回最小距离在distances数组中的下标</span></span><br><span class="line">                self.clf_[classification].append(feature) <span class="comment"># 将点加入clf_数组相应位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># print("分组情况:",self.clf_)</span></span><br><span class="line">            prev_centers = dict(self.centers_)  <span class="comment"># 复制centers_字典</span></span><br><span class="line">            <span class="comment"># print(prev_centers) # &#123;0: array([1., 2.]), 1: array([1.5, 1.8])&#125; → &#123;0: array([1., 2.]), 1: array([4.9 , 5.88])&#125;</span></span><br><span class="line">            <span class="comment"># print(self.clf_)</span></span><br><span class="line">            <span class="comment"># &#123;0: [array([1., 2.])],1: [array([1.5, 1.8]), array([5., 8.]), array([8., 8.]), array([1., 0.6]), array([9., 11.])]&#125;</span></span><br><span class="line">            <span class="comment"># &#123;0: [array([1., 2.]), array([1.5, 1.8]), array([1., 0.6])],1: [array([5., 8.]), array([8., 8.]), array([9., 11.])]&#125;</span></span><br><span class="line">            <span class="comment"># &#123;0: [array([1., 2.]), array([1.5, 1.8]), array([1., 0.6])],1: [array([5., 8.]), array([8., 8.]), array([9., 11.])]&#125;</span></span><br><span class="line">            <span class="comment"># 根据聚类名遍历每个聚类</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> self.clf_:</span><br><span class="line">                <span class="comment"># print(c)  0 1</span></span><br><span class="line">                <span class="comment"># 取每个聚类的均值作为正在遍历的类的新中心点，axis=0为二维数组纵向取均值</span></span><br><span class="line">                self.centers_[c] = np.average(self.clf_[c], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># '中心点'是否在误差范围</span></span><br><span class="line">            optimized = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 根据聚类名遍历每个聚类</span></span><br><span class="line">            <span class="comment"># print("prev")</span></span><br><span class="line">            <span class="comment"># print(prev_centers)</span></span><br><span class="line">            <span class="comment"># # print("centers")</span></span><br><span class="line">            <span class="comment"># print(self.centers_)</span></span><br><span class="line">            <span class="keyword">for</span> center <span class="keyword">in</span> self.centers_:</span><br><span class="line">                org_centers = prev_centers[center]</span><br><span class="line">                cur_centers = self.centers_[center]</span><br><span class="line">                <span class="comment"># 比较类上次的中心点以及本次计算的中心点的差值，计算偏差</span></span><br><span class="line">                <span class="keyword">if</span> np.sum((cur_centers - org_centers) / org_centers * <span class="number">100.0</span>) &gt; self.tolerance_:</span><br><span class="line">                    optimized = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> optimized:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测数据所属的聚类，根据所测点距中心点的大小进行判定</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, p_data)</span>:</span></span><br><span class="line">        distances = [np.linalg.norm(p_data - self.centers_[center]) <span class="keyword">for</span> center <span class="keyword">in</span> self.centers_]</span><br><span class="line">        index = distances.index(min(distances))</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    x = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1.5</span>, <span class="number">1.8</span>], [<span class="number">5</span>, <span class="number">8</span>], [<span class="number">8</span>, <span class="number">8</span>], [<span class="number">1</span>, <span class="number">0.6</span>], [<span class="number">9</span>, <span class="number">11</span>]])</span><br><span class="line"></span><br><span class="line">    k_means = K_Means(k=<span class="number">2</span>)</span><br><span class="line">    k_means.fit(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印最终的中心点</span></span><br><span class="line">    <span class="comment"># print(k_means.centers_)  # &#123;0: array([1.16666667, 1.46666667]), 1: array([7.33333333, 9.        ])&#125;</span></span><br><span class="line">    <span class="keyword">for</span> center <span class="keyword">in</span> k_means.centers_:</span><br><span class="line">        <span class="comment"># 将最终的中心点使用五角星标志出来</span></span><br><span class="line">        pyplot.scatter(k_means.centers_[center][<span class="number">0</span>], k_means.centers_[center][<span class="number">1</span>], marker=<span class="string">'*'</span>, s=<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历每个聚类的所有点</span></span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> k_means.clf_:</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> k_means.clf_[cat]:</span><br><span class="line">            pyplot.scatter(point[<span class="number">0</span>], point[<span class="number">1</span>], c=(<span class="string">'r'</span> <span class="keyword">if</span> cat == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'b'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测数据</span></span><br><span class="line">    predict = [[<span class="number">2</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">9</span>]]</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> predict:</span><br><span class="line">        <span class="comment"># 获取聚类所在的下标</span></span><br><span class="line">        cat = k_means.predict(predict)</span><br><span class="line">        <span class="comment"># 参数依次为坐标x,y,使用字母代号表示的颜色，以及显示的样式（为x表示是x号）</span></span><br><span class="line">        pyplot.scatter(feature[<span class="number">0</span>], feature[<span class="number">1</span>], c=(<span class="string">'r'</span> <span class="keyword">if</span> cat == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'b'</span>), marker=<span class="string">'x'</span>)</span><br><span class="line">        </span><br><span class="line">    pyplot.show()</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="http://blog.topspeedsnail.com/wp-content/uploads/2016/11/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2016-11-10-%E4%B8%8B%E5%8D%889.38.13.png" alt="ä½¿ç¨Pythonå®ç°K-Meansç®æ³"></p><p>K-Means算法需要你指定K值，也就是需要人为指定数据应该分为几组。下一帖我会实现Mean Shift算法，它也是一种聚类算法(Hierarchical)，和K-Means(Flat)不同的是它可以自动判断数据集应该分为几组。</p><h4 id="在实际数据上应用K-Means算法"><a href="#在实际数据上应用K-Means算法" class="headerlink" title="在实际数据上应用K-Means算法"></a>在实际数据上应用K-Means算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据集：titanic.xls(泰坦尼克号遇难者/幸存者名单)</span></span><br><span class="line"><span class="string">&lt;http://blog.topspeedsnail.com/wp-content/uploads/2016/11/titanic.xls&gt;</span></span><br><span class="line"><span class="string">***字段***</span></span><br><span class="line"><span class="string">pclass: 社会阶层(1，精英；2，中产；3，船员/劳苦大众)</span></span><br><span class="line"><span class="string">survived: 是否幸存</span></span><br><span class="line"><span class="string">name: 名字</span></span><br><span class="line"><span class="string">sex: 性别</span></span><br><span class="line"><span class="string">age: 年龄</span></span><br><span class="line"><span class="string">sibsp: 哥哥姐姐个数</span></span><br><span class="line"><span class="string">parch: 父母儿女个数</span></span><br><span class="line"><span class="string">ticket: 船票号</span></span><br><span class="line"><span class="string">fare: 船票价钱</span></span><br><span class="line"><span class="string">cabin: 船舱</span></span><br><span class="line"><span class="string">embarked</span></span><br><span class="line"><span class="string">boat</span></span><br><span class="line"><span class="string">body: 尸体</span></span><br><span class="line"><span class="string">home.dest</span></span><br><span class="line"><span class="string">******</span></span><br><span class="line"><span class="string">目的：使用除survived字段外的数据进行k-means分组（分成两组:生/死），然后和survived字段对比，看看分组效果。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">df = pd.read_excel(<span class="string">'titanic.xls'</span>)</span><br><span class="line"><span class="comment">#print(df.shape)  (1309, 14)</span></span><br><span class="line"><span class="comment">#print(df.head())</span></span><br><span class="line"><span class="comment">#print(df.tail())</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    pclass  survived                                            name     sex  \</span></span><br><span class="line"><span class="string">0       1         1                    Allen, Miss. Elisabeth Walton  female</span></span><br><span class="line"><span class="string">1       1         1                   Allison, Master. Hudson Trevor    male</span></span><br><span class="line"><span class="string">2       1         0                     Allison, Miss. Helen Loraine  female</span></span><br><span class="line"><span class="string">3       1         0             Allison, Mr. Hudson Joshua Creighton    male</span></span><br><span class="line"><span class="string">4       1         0  Allison, Mrs. Hudson J C (Bessie Waldo Daniels)  female</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">       age  sibsp  parch  ticket      fare    cabin embarked boat   body  \</span></span><br><span class="line"><span class="string">0  29.0000      0      0   24160  211.3375       B5        S    2    NaN</span></span><br><span class="line"><span class="string">1   0.9167      1      2  113781  151.5500  C22 C26        S   11    NaN</span></span><br><span class="line"><span class="string">2   2.0000      1      2  113781  151.5500  C22 C26        S  NaN    NaN</span></span><br><span class="line"><span class="string">3  30.0000      1      2  113781  151.5500  C22 C26        S  NaN  135.0</span></span><br><span class="line"><span class="string">4  25.0000      1      2  113781  151.5500  C22 C26        S  NaN    NaN</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    home.dest</span></span><br><span class="line"><span class="string">0                     St Louis, MO</span></span><br><span class="line"><span class="string">1  Montreal, PQ / Chesterville, ON</span></span><br><span class="line"><span class="string">2  Montreal, PQ / Chesterville, ON</span></span><br><span class="line"><span class="string">3  Montreal, PQ / Chesterville, ON</span></span><br><span class="line"><span class="string">4  Montreal, PQ / Chesterville, ON</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 去掉无用字段</span></span><br><span class="line">df.drop([<span class="string">'body'</span>,<span class="string">'name'</span>,<span class="string">'ticket'</span>], <span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">df.convert_objects(convert_numeric=<span class="literal">True</span>)</span><br><span class="line">df.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 把NaN替换为0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 把字符串映射为数字，例如&#123;female:1, male:0&#125;</span></span><br><span class="line">df_map = &#123;&#125;  <span class="comment"># 保存映射关系</span></span><br><span class="line">cols = df.columns.values</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">    <span class="keyword">if</span> df[col].dtype != np.int64 <span class="keyword">and</span> df[col].dtype != np.float64:</span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ele <span class="keyword">in</span> set(df[col].values.tolist()):</span><br><span class="line">            <span class="keyword">if</span> ele <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                temp[ele] = x</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        df_map[df[col].name] = temp</span><br><span class="line">        df[col] = list(map(<span class="keyword">lambda</span> val:temp[val], df[col]))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#for key, value in df_map.iteritems():</span></span><br><span class="line"><span class="comment">#    print(key,value)</span></span><br><span class="line"><span class="comment">#print(df.head())</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 由于是非监督学习，不使用label</span></span><br><span class="line">x = np.array(df.drop([<span class="string">'survived'</span>],<span class="number">1</span> ).astype(float))</span><br><span class="line">x = preprocessing.scale(x)</span><br><span class="line"> </span><br><span class="line">clf = KMeans(n_clusters=<span class="number">2</span>)</span><br><span class="line">clf.fit(x)</span><br><span class="line"><span class="comment"># 上面已把数据分成两组</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面计算分组准确率是多少</span></span><br><span class="line">y = np.array(df[<span class="string">'survived'</span>])</span><br><span class="line"> </span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    predict_data = np.array(x[i].astype(float))</span><br><span class="line">    predict_data = predict_data.reshape(<span class="number">-1</span>, len(predict_data))</span><br><span class="line">    predict = clf.predict(predict_data)</span><br><span class="line">    <span class="comment">#print(predict[0], y[i])</span></span><br><span class="line">    <span class="keyword">if</span> predict[<span class="number">0</span>] == y[i]:</span><br><span class="line">        correct+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">print(correct*<span class="number">1.0</span>/len(x))</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python sk_kmeans.py </span><br><span class="line"><span class="number">0.692131398014</span>  <span class="comment"># 泰坦尼克号的幸存者和遇难者并不是随机分布的，在很大程度上取决于年龄、性别和社会地位</span></span><br><span class="line">$ python sk_kmeans.py </span><br><span class="line"><span class="number">0.307868601986</span>  <span class="comment"># 结果出现很大波动，原因是它随机分配组(生:0,死:1）(生:1,死:0）</span></span><br><span class="line">                <span class="comment"># 1-0.307868601986是实际值</span></span><br><span class="line">$ python sk_kmeans.py </span><br><span class="line"><span class="number">0.692131398014</span></span><br></pre></td></tr></table></figure><p>K-means、和KNN算法比较</p><p>KNN(K-Nearest Neighbor)介绍</p><p>算法思路：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。 </p><h4 id="看下面这幅图："><a href="#看下面这幅图：" class="headerlink" title="看下面这幅图："></a>看下面这幅图：</h4><p><img src="https://img-blog.csdn.net/20131024142609828" alt="è¿éåå¾çæè¿°"></p><p>KNN的算法过程是是这样的：<br>　　从上图中我们可以看到，图中的数据集是良好的数据，即都打好了label，一类是蓝色的正方形，一类是红色的三角形，那个绿色的圆形是我们待分类的数据。<br>　　如果K=3，那么离绿色点最近的有2个红色三角形和1个蓝色的正方形，这3个点投票，于是绿色的这个待分类点属于红色的三角形<br>　　如果K=5，那么离绿色点最近的有2个红色三角形和3个蓝色的正方形，这5个点投票，于是绿色的这个待分类点属于蓝色的正方形<br>　　我们可以看到，KNN本质是基于一种数据统计的方法！其实很多机器学习算法也是基于数据统计的。<br>　　KNN是一种memory-based learning，也叫instance-based learning，属于lazy learning。即它没有明显的前期训练过程，而是程序开始运行时，把数据集加载到内存后，不需要进行训练，就可以开始分类了。<br>　　具体是每次来一个未知的样本点，就在附近找K个最近的点进行投票。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k-近邻算法根据特征比较，然后提取样本集中特征最相似数据(最邻近)的分类标签</span></span><br><span class="line"><span class="comment"># 假设样本有两个特征，那么大致从样本集分布的散点图判断，也就是二维空间来体现它们的位置关系</span></span><br><span class="line"><span class="comment"># 这时采用点与点的距离可以计算出特定点与其他点的距离远近并加以排序，我们就可以知道谁离它最近了</span></span><br><span class="line"><span class="comment"># 在从前k名最近的点中判断属于特征1和特征2的点的比例，比例大的特征为该特定点的特征</span></span><br><span class="line"><span class="comment"># 所以k-近邻算法的步骤如下：</span></span><br><span class="line"><span class="comment"># 计算已知类别数据集中的点与当前点之间的距离；</span></span><br><span class="line"><span class="comment"># 按照距离递增次序排序；</span></span><br><span class="line"><span class="comment"># 选取与当前点距离最小的k个点；</span></span><br><span class="line"><span class="comment"># 确定前k个点所在类别的出现频率；</span></span><br><span class="line"><span class="comment"># 返回前k个点所出现频率最高的类别作为当前点的预测分类。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">函数说明：创建数据集</span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">    无</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    dataset - 数据集</span></span><br><span class="line"><span class="string">    labels - 分类标签</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    dataset=np.array([[<span class="number">1</span>,<span class="number">101</span>],[<span class="number">5</span>,<span class="number">89</span>],[<span class="number">108</span>,<span class="number">5</span>],[<span class="number">115</span>,<span class="number">8</span>]])</span><br><span class="line">    labels=[<span class="string">'爱情片'</span>,<span class="string">'爱情片'</span>,<span class="string">'动作片'</span>,<span class="string">'动作片'</span>]</span><br><span class="line">    <span class="keyword">return</span> dataset,labels</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">函数说明：KNN算法，分类器</span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">    inX - 用于分类的特定数据(测试集)</span></span><br><span class="line"><span class="string">    dataSet - 用于训练的数据(训练集)</span></span><br><span class="line"><span class="string">    labes - 分类标签</span></span><br><span class="line"><span class="string">    k - kNN算法参数,选择距离最小的k个点</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    sortedClassCount[0][0] - 分类结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classfy</span><span class="params">(inX,dataSet,labels,k)</span>:</span></span><br><span class="line">    <span class="comment"># 返回数据集的行数</span></span><br><span class="line">    dataSetSize=dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 使用tile数组实现inX的多行复制，满足矩阵相减的条件</span></span><br><span class="line">    diffMat=np.tile(inX,(dataSetSize,<span class="number">1</span>))-dataSet</span><br><span class="line">    <span class="comment"># 计算距离（矩阵各行取平方和，最后开方）</span></span><br><span class="line">    <span class="comment"># 使用sum函数中的axis参数可以决定按行（1）相加</span></span><br><span class="line">    distances=((diffMat**<span class="number">2</span>).sum(axis=<span class="number">1</span>))**<span class="number">0.5</span></span><br><span class="line">    <span class="comment"># 返回索引排序</span></span><br><span class="line">    sortedDistIndies=distances.argsort()</span><br><span class="line">    <span class="comment"># 记录类别次数</span></span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    <span class="comment"># 取出前k个元素的类别</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment"># 根据索引获取类别值</span></span><br><span class="line">        voteIlabel = labels[sortedDistIndies[i]]</span><br><span class="line">        <span class="comment"># dict.get(key,default=None)，在classCount字典里查找类别，如果没有则返回1</span></span><br><span class="line">        classCount[voteIlabel]=classCount.get(voteIlabel,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="comment"># reverse降序排序字典</span></span><br><span class="line">    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建数据集</span></span><br><span class="line">    dataset,labels=createDataSet()</span><br><span class="line">    <span class="comment"># 打印数据集</span></span><br><span class="line">    <span class="comment"># print(dataset)</span></span><br><span class="line">    <span class="comment"># print(labels)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试集</span></span><br><span class="line">    test=[<span class="number">101</span>,<span class="number">20</span>]</span><br><span class="line">    test_class=classfy(test,dataset,labels,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打印分类结果</span></span><br><span class="line">    print(test_class)</span><br></pre></td></tr></table></figure><p>总结：</p><p>KNN和K-Means的区别</p><p>KNN计算方法为：</p><p>1计算测试数据与各个训练数据之间的距离；</p><p>2按照距离的递增关系进行排序；</p><p>3选取距离最小的K个点； </p><p>4确定前K个点所在类别的出现频率； </p><p>5返回前K个点中出现频率最高的类别作为测试数据的预测分类。 </p><p>K-means的计算方法为： </p><p>1 随机选取k个中心点； </p><p>2 遍历所有数据，将每个数据划分到最近的中心点中； </p><p>3 计算每个聚类的平均值，并作为新的中心点 ；</p><p>4 重复2-3，直到这k个中线点不再变化（收敛了），或执行了足够多的迭代。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;K-means方法是一种非监督学习的算法，它解决的是聚类问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、算法简介：K-means方法是聚类中的经典算法，数据挖掘十大经典算法之一；算法接受参数k,然后将事先输入的n个数据对象划分为k个聚类以便使得所获得的聚类满足聚类中的对象相似度较高，而不同聚类中的对象相似度较小。&lt;/p&gt;
&lt;p&gt;2、算法思想：以空间中k个点为中心进行聚类，对最靠近他们的对象归类，通过迭代的方法，逐次更新各聚类中心的值，直到得到最好的聚类结果。&lt;/p&gt;
&lt;p&gt;3、算法描述：&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://8bun.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="KNN" scheme="https://8bun.github.io/tags/KNN/"/>
    
      <category term="K-means" scheme="https://8bun.github.io/tags/K-means/"/>
    
      <category term="聚类" scheme="https://8bun.github.io/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="分类" scheme="https://8bun.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>都挺好</title>
    <link href="https://8bun.github.io/2019/04/21/%E9%83%BD%E6%8C%BA%E5%A5%BD/"/>
    <id>https://8bun.github.io/2019/04/21/都挺好/</id>
    <published>2019-04-21T13:32:56.000Z</published>
    <updated>2019-07-03T10:31:45.524Z</updated>
    
    <content type="html"><![CDATA[<p>​    周末两天看完《都挺好》电视剧，这剧还真有点意思。46集不长不短，却叙述了一段一波三折的家庭故事。剧以大城市现实生活为开头，却在开头之后不久倒叙了主人公”苏明玉”小时候的家庭情况，小时候，家境拮据，母亲为了供大儿子”苏明哲”上美国名校，不顾一切卖掉了正面临高考的小女儿”苏明玉”正在居住的房间，可怜的小女儿只能赌气跟母亲住在一起，因为打小，母亲就”看不起”她，她要买本习题集都不给她，她母亲连女儿想考清华的梦想给破灭了，把她送去了一家师范学校，虽说可怜天下父母心，但这种家庭情况当母亲的观念也是”重男轻女”的较高境界，连父亲”苏大强”也是个奇葩，在妻子面前窝窝索索，简直就像个缩头乌龟，母亲家庭暴力的时候，当父亲从来都没有站出来说几句公道话，总是找着各种理由推卸责任。然而，当女儿的”苏明玉”与母亲对峙的这几年，她成长起来了。她学会独立，努力打工，终有一天发辅导班传单的时候，遇上了人生的恩师”蒙总”，遇上伯乐的千里马像脱了缰，不断狂奔，事业节节高升。</p><a id="more"></a><p>​    而另外一边，二哥因为冲动差点坐牢，盲目投资被骗，丢掉工作，离婚种种事情，一路的错误让他开始明白自己的过失，最终跑去非洲想干一番事业，他说过，有些事，有些艰苦，还是得吃的，开始明白小时候”啃老”的不对，家中对妹妹的”罪行”的严重。而大儿子大学考进美国名校，在家中怎么来说也是一件光宗耀祖的事情，可结婚定居美国之后，因为死爱面子，曾经自己失了业还“打肿脸充胖子”跟家里人说自己混的很好。然而身边的贤妻不断地在他“犯傻”的时候拯救了他，身为家中老大，但因为母亲过世的时候没在场而深深自责，想以实际行动弥补父亲，经常很多事情纵容了父亲的”无理”行为，还意识不到自己已经”分辨不出是非”了，在父亲面前依依顺顺，很多事情也是通过身边贤妻和妹妹的协助下才得以正确的解决。然而，身为老大，在母亲不在的时候，曾经多少次挽救了面临奔散的家庭。《都挺好》表面上是在讲重男轻女的因因果果，实则是在讲二代人的矛盾，<strong>是传统的家庭观念和快节奏的现代生活的矛盾，是啃老和养老的矛盾，是爱与不爱的矛盾。</strong></p><p><img src="https://pic3.zhimg.com/v2-d06627b6a278afc4a2e37f20349bc825_1200x500.jpg" alt="img"></p><p>​    最后，以编剧王三毛的一句总结这部剧吧，<strong>“原生家庭欠你的，你得靠自己找回来。找不回来就是一场灾难，找回来就「都挺好」”</strong>。<strong>希望所有曾受到家庭伤害的人，都能与苦难和解，活出明亮的人生。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    周末两天看完《都挺好》电视剧，这剧还真有点意思。46集不长不短，却叙述了一段一波三折的家庭故事。剧以大城市现实生活为开头，却在开头之后不久倒叙了主人公”苏明玉”小时候的家庭情况，小时候，家境拮据，母亲为了供大儿子”苏明哲”上美国名校，不顾一切卖掉了正面临高考的小女儿”苏明玉”正在居住的房间，可怜的小女儿只能赌气跟母亲住在一起，因为打小，母亲就”看不起”她，她要买本习题集都不给她，她母亲连女儿想考清华的梦想给破灭了，把她送去了一家师范学校，虽说可怜天下父母心，但这种家庭情况当母亲的观念也是”重男轻女”的较高境界，连父亲”苏大强”也是个奇葩，在妻子面前窝窝索索，简直就像个缩头乌龟，母亲家庭暴力的时候，当父亲从来都没有站出来说几句公道话，总是找着各种理由推卸责任。然而，当女儿的”苏明玉”与母亲对峙的这几年，她成长起来了。她学会独立，努力打工，终有一天发辅导班传单的时候，遇上了人生的恩师”蒙总”，遇上伯乐的千里马像脱了缰，不断狂奔，事业节节高升。&lt;/p&gt;
    
    </summary>
    
      <category term="都挺好" scheme="https://8bun.github.io/categories/%E9%83%BD%E6%8C%BA%E5%A5%BD/"/>
    
    
      <category term="家庭" scheme="https://8bun.github.io/tags/%E5%AE%B6%E5%BA%AD/"/>
    
      <category term="都挺好" scheme="https://8bun.github.io/tags/%E9%83%BD%E6%8C%BA%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title>网络包传输过程</title>
    <link href="https://8bun.github.io/2019/03/24/%E7%BD%91%E7%BB%9C%E5%8C%85%E7%9A%84%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/"/>
    <id>https://8bun.github.io/2019/03/24/网络包的传输过程/</id>
    <published>2019-03-24T10:22:00.000Z</published>
    <updated>2019-03-25T14:08:45.450Z</updated>
    
    <content type="html"><![CDATA[<h4 id="协议栈与套接字"><a href="#协议栈与套接字" class="headerlink" title="协议栈与套接字"></a>协议栈与套接字</h4><p><strong>协议栈</strong>是一种网络控制软件，它主要根据套接字中记录的通信信息来工作。</p><p>在Window上使用<code>netstat</code>命令可以查看套接字的信息，使用<code>-ano</code>可以命令选择项，<code>a</code>表示显示所有套接字（包括正在通信和尚未开始通信等状态下的），<code>n</code>表示显示IP地址和端口号，<code>o</code>表示使用该套接字的程序PID。</p><p>在应用程序与服务器之间进行连接通信的过程，实质上进行了套接字的创建连接，通过套接字携带的目的端口、IP地址等进行匹配连接。创建套接字的过程非常简单，只要调用Socket库中的socket程序组件就可以了，实际上，创建完套接字后，该套接字传递到协议栈中后，协议栈会返回一个描述符，应用程序会将描述符存在内存中，以后委托协议栈使用哪个套接字来连接或收发数据，就可以直接出示描述符来避免多个套接字冲突。</p><a id="more"></a><p><strong><em>那么连接过程究竟是如何的呢？</em></strong></p><h4 id="数据连接过程"><a href="#数据连接过程" class="headerlink" title="数据连接过程"></a>数据连接过程</h4><p>协议栈中存在重要的TCP和IP模块，当套接字创建成功之后，客户端的协议栈生成一个<code>SYN</code>为1的TCP包，并发送给服务器，这个TCP包的头部还包含了客户端向服务器发送数据时使用的初始序号，以及服务器向客户端发送数据时需要用到的窗口大小。</p><p>协议栈将收到应用程序发过来的数据包加工后（加上协议头部），并不会马上发送出去，而是会根据一个叫<code>MTU</code>（Maximum Transmission Unit，最大传输单元）的参数进行判断，MTU的大小是协议栈协议头部和数据长度的总和，所以MTU-协议栈协议头部=<code>`MSS</code>（Maximum Segment Size，最大分段大小），当协议栈收到的数据接近或超过MSS时，就应该发送出去了。如果应用程序发送包的频率过小，很可能导致协议栈一直处于等待状态，为了解决这一问题，协议栈内部会有一个计时器规定等待发送的时间。</p><p>​    <strong>IP模块会根据TCP传递的目的服务器IP地址、发送IP写入IP头部，而不会管IP是否正确。</strong></p><p>​    <strong>实际上，一般计算机的网卡IP才是计算机的IP，每一个IP都可以将数据包传递到相应子网的以太网中，通过<code>route print</code>可以查看本地路由表判断该由哪块网卡发送。</strong></p><p>​    <strong>生成IP头部之后，接下来IP模块还要将MAC头部追加到IP头部之前，MAC头部是MAC头部是以太网使用的头部，MAC地址是路由器的以太网（cwq简单看成局域网）地址，如00-80-C8-2D-82-EA（也可以使用’.’代替’-‘）MAC头部包含了14个字节（接收方的MAC地址，发送方的MAC地址，以太类型，48+48+16bit），你可以通过ARP（Address Resolution Protocol，地址解析协议）查询目标服务器（网卡）的MAC地址，如果对方与自己在同一个子网中，就可以通过广播响应得到，为了减少空间消耗，每查询过的MAC地址生成的ARP包，都会被缓存起来，你可以通过<code>arp -a</code>查询缓存条目。</strong></p><p>​    <strong>接下来轮到网卡了，不过应该由网卡驱动程序来控制网卡（网卡的ROM中存在着世界上唯一的MAC地址，这是在生产的时候厂商就已经写入的），将IP数字信号转换为电信号（或光信号）发送出去，网卡中包含有MAC模块，网卡将发送包复制到缓冲区后，MAC模块会在缓冲区内将包取出，并在开头加上报头和起始帧分界符，在末尾加上用于检测错误的FCS（帧校验序列）</strong></p><p>​    <strong>报头是一串像<code>10101010...</code>这样1和0交替出现的比特序列，长度为56比特，它的作用是确定包的读取时机，主要是将1和0看成纵坐标画出的上下波动图代表电信号的高低电平的波动，如果有连续的1出现，那么此处就是读取时刻了。在这里有一个转换细节，就是连续的1出现和0出现，在电平波动上结果是一样的，那么就无法判断出这个读取时刻了，为了解决这一问题，引入了一个时钟信号，它是一段规律的电平波动，如在间隔时间，如</strong></p><p><strong><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D250/sign=6269a09f968fa0ec7bc763081696594a/b7003af33a87e950359391c017385343faf2b491.jpg" alt="img">，然后通过和数据信号进行一一对应（作用完将信号传递给接收方，接收方根据信号提取出时钟信号，然后计算出数据信号），就可实现连续的1和0的判断，末尾的FCS校验序列是用来检查在包传输过程中因噪声导致的波形紊乱、数据错误，由32bit组成，通过一组公式从包头到尾部计算出来的，接收方可以通过相同的公式计算出此序列，比较开始的FCS序列是否出现不同来判断包数据是否出现错误，差异化会导致包被丢弃</strong></p><p>​    <strong>接下来就是交由网线发送了，发送信号的操作分为联众，一种使用集线器的半双工模式，一种使用交换机的全双工模式。半双工模式会先检查网线中是否存在其他正在传输的信号，有则待其传输完毕。</strong></p><p>​    <strong>然后，<code>PHY（MAU）</code>模块会将信号转换为可在网线上传输的信号格式，并通过网线发送出去。</strong></p><p>​    当这个包到达服务器后，服务器会发出一个包含<code>ACK</code>号（表示确认已收到包）、初始序号和窗口大小的<code>SYN</code>为1的包。</p><p>​    当这个包到达客户端后，客户端会返回一个包含确认收到包的<code>ACK</code>号的TCP包。</p><p>​    其中，为了防止网络攻击，通常会以一个随机数计算出的一个初始序号来代表第一个包的编号，并且通信双方在数据传递之前就已经知道这个初始序号。而<code>ACK</code>号是通过初始序号来计算得出的（表示为已经收到的第ACK字节之前的所有字节）。在得到对方确认之前，发送过的包都会保存在发送缓冲区中，以便TCP重传。</p><p>​    由于服务器的距离不是固定的，所以在返回ACK号所需时间也是不固定的。为了提高效率，TCP采用了动态调整等待时间（ACK号返回所需的时间）的方法。而为了能实现更高效地利用等待时间，客户端会在发送一个包之后，不等待ACK号的返回，而是直接发送后续的一系列包，我们称之为<strong>滑动窗口方式</strong>。</p><p>​    在服务器应用程序接收数据之前，会把接收到的包暂时先存储在自己的缓存区中，为了不过载，服务器会在返回ACK的时候顺带把自己缓冲区还能接收的数据空间大小返回。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;协议栈与套接字&quot;&gt;&lt;a href=&quot;#协议栈与套接字&quot; class=&quot;headerlink&quot; title=&quot;协议栈与套接字&quot;&gt;&lt;/a&gt;协议栈与套接字&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;协议栈&lt;/strong&gt;是一种网络控制软件，它主要根据套接字中记录的通信信息来工作。&lt;/p&gt;
&lt;p&gt;在Window上使用&lt;code&gt;netstat&lt;/code&gt;命令可以查看套接字的信息，使用&lt;code&gt;-ano&lt;/code&gt;可以命令选择项，&lt;code&gt;a&lt;/code&gt;表示显示所有套接字（包括正在通信和尚未开始通信等状态下的），&lt;code&gt;n&lt;/code&gt;表示显示IP地址和端口号，&lt;code&gt;o&lt;/code&gt;表示使用该套接字的程序PID。&lt;/p&gt;
&lt;p&gt;在应用程序与服务器之间进行连接通信的过程，实质上进行了套接字的创建连接，通过套接字携带的目的端口、IP地址等进行匹配连接。创建套接字的过程非常简单，只要调用Socket库中的socket程序组件就可以了，实际上，创建完套接字后，该套接字传递到协议栈中后，协议栈会返回一个描述符，应用程序会将描述符存在内存中，以后委托协议栈使用哪个套接字来连接或收发数据，就可以直接出示描述符来避免多个套接字冲突。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://8bun.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="协议栈" scheme="https://8bun.github.io/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    
      <category term="TCP/IP" scheme="https://8bun.github.io/tags/TCP-IP/"/>
    
      <category term="套接字" scheme="https://8bun.github.io/tags/%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    
      <category term="网卡" scheme="https://8bun.github.io/tags/%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript DOM操作</title>
    <link href="https://8bun.github.io/2019/03/21/JavaScript%20DOM%E6%93%8D%E4%BD%9C/"/>
    <id>https://8bun.github.io/2019/03/21/JavaScript DOM操作/</id>
    <published>2019-03-21T13:40:15.000Z</published>
    <updated>2019-03-25T14:08:45.447Z</updated>
    
    <content type="html"><![CDATA[<p>解释：DOM，指的是文档对象模型（Document Object Model）。是针对HTML和XML文档的</p><p>一个API,描绘了一个层次化的节点树，允许开发人员添加、删除和修改页面的某一部分。</p><p>HTML  DOM树形结构如下：</p><p><img src="http://img.blog.csdn.net/20160722150825262" alt="DOM模型"><br><a id="more"></a></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><strong>三要素：事件源（受监听的html标签）、事件（监听器）、事件驱动程序（动作）</strong>。</p><ol><li><p><strong>获取时间源的方式（DOM节点的获取）</strong></p><p>获取事件源的常见方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);      <span class="comment">//方式一：通过id获取单个标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);     <span class="comment">//方式二：通过 标签名 获得 标签数组，所以有s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"hehe"</span>);  <span class="comment">//方式三：通过 类名 获得 标签数组，所以有s</span></span><br></pre></td></tr></table></figure></li><li><p><strong>绑定事件的方式</strong></p><p>方式一：直接绑定匿名函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定事件的第一种方式</span></span></span><br><span class="line"><span class="javascript">    div1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：先单独定义函数，再绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定事件的第二种方式</span></span></span><br><span class="line"><span class="javascript">    div1.onclick = fn;   <span class="comment">//注意，这里是fn，不是fn()。fn()指的是返回值。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//单独定义函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三：行内绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> <span class="attr">onclick</span>=<span class="string">"fn()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>事件驱动程序</strong></p><p>我们在上面是拿alert举例，不仅如此，我们还可以操作标签的属性和样式。举例如下：</p><p>点击鼠标时，原本粉色的div变大了，背景变红：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #box1&#123;</span></span><br><span class="line"><span class="undefined">        width:100px;</span></span><br><span class="line"><span class="undefined">        height:100px;</span></span><br><span class="line"><span class="undefined">       background-color:pink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击鼠标时，原本粉色的div变大了，背景变红了</span></span></span><br><span class="line"><span class="javascript">        div1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            div1.style.width = <span class="string">"200px"</span>;  <span class="comment">//属性值要写引号</span></span></span><br><span class="line"><span class="javascript">            div1.style.height = <span class="string">"200px"</span>;</span></span><br><span class="line"><span class="javascript">            div1.style.backgroundColor = <span class="string">"red"</span>;  <span class="comment">//属性名是backgroundColor，不是background-color</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下：</p><p><img src="https://camo.githubusercontent.com/5eca39e4c0689070ca9aecfa7b58d610f1d6a831/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303132365f313732302e676966" alt="img"></p></li></ol><h3 id="onload事件"><a href="#onload事件" class="headerlink" title="onload事件"></a>onload事件</h3><blockquote><p>onload事件比较特殊，这里单独讲一下。</p></blockquote><p><strong>当页面加载（文本和图片）完毕的时候，触发onload事件。</strong></p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"smyhvae"</span>);  <span class="comment">//等页面加载完毕时，打印字符串</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有一点我们要知道：<strong>js的加载是和html同步加载的</strong>。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。</p><p>建议是：整个页面上所有元素加载完毕在执行js内容。所以，window.onload可以预防使用标签在定义标签之前。</p><h3 id="事件举例：京东顶部广告栏"><a href="#事件举例：京东顶部广告栏" class="headerlink" title="事件举例：京东顶部广告栏"></a>事件举例：京东顶部广告栏</h3><p><a href="https://camo.githubusercontent.com/c278af82562b0d25546134162cf90f8072ae1aa7/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303132325f313032302e706e67" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/c278af82562b0d25546134162cf90f8072ae1aa7/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303132325f313032302e706e67" alt="img"></a></p><p>比如上面这张图，当鼠标点击右上角的<code>X</code>时，关掉整个广告栏，这就要用到事件。</p><p>代码实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .top-banner &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            height: 80px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .w &#123;</span></span><br><span class="line"><span class="undefined">            width: 1210px;</span></span><br><span class="line"><span class="undefined">            margin: 10px auto;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        img &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 1210px;</span></span><br><span class="line"><span class="undefined">            height: 80px;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        a &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 5px;</span></span><br><span class="line"><span class="undefined">            right: 5px;</span></span><br><span class="line"><span class="undefined">            color: #fff;</span></span><br><span class="line"><span class="undefined">            background-color: #000;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">            width: 20px;</span></span><br><span class="line"><span class="undefined">            height: 20px;</span></span><br><span class="line"><span class="undefined">            font: 700 14px/20px "simsum";</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .hide &#123;</span></span><br><span class="line"><span class="undefined">            display: none!important;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-banner"</span> <span class="attr">id</span>=<span class="string">"topBanner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"closeBanner"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//需求：点击案例，隐藏盒子。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//思路：点击a链接，让top-banner这个盒子隐藏起来（加隐藏类名）。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.获取事件源和相关元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> closeBanner = <span class="built_in">document</span>.getElementById(<span class="string">"closeBanner"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> topBanner = <span class="built_in">document</span>.getElementById(<span class="string">"topBanner"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="javascript">    closeBanner.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//3.书写事件驱动程序</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//类控制</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//        topBanner.className += " hide"; //保留原类名，添加新类名</span></span></span><br><span class="line"><span class="javascript">        topBanner.className = <span class="string">"hide"</span>;<span class="comment">//替换旧类名（方式一），改变所属类，应用hide类的样式</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//        topBanner.style.display = "none"; //方式二：与上一行代码的效果相同</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意最后一行代码，这种方式会替换旧类名，意思是，不管之前的类名叫什么，都会被修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解释：DOM，指的是文档对象模型（Document Object Model）。是针对HTML和XML文档的&lt;/p&gt;
&lt;p&gt;一个API,描绘了一个层次化的节点树，允许开发人员添加、删除和修改页面的某一部分。&lt;/p&gt;
&lt;p&gt;HTML  DOM树形结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160722150825262&quot; alt=&quot;DOM模型&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://8bun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://8bun.github.io/tags/JavaScript/"/>
    
      <category term="DOM" scheme="https://8bun.github.io/tags/DOM/"/>
    
      <category term="事件" scheme="https://8bun.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
</feed>
